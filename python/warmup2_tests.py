import unittest
import warmup2

class TestWarmUp1(unittest.TestCase):
    def test_string_times(self):
        self.assertEqual(warmup2.string_times('Hi', 2), 'HiHi')
        self.assertEqual(warmup2.string_times('Hi', 3), 'HiHiHi')
        self.assertEqual(warmup2.string_times('Hi', 1), 'Hi')
        self.assertEqual(warmup2.string_times('Hi', 0), '')
        self.assertEqual(warmup2.string_times('Hi', 5), 'HiHiHiHiHi')
        self.assertEqual(warmup2.string_times('Oh Boy!', 2), 'Oh Boy!Oh Boy!')
        self.assertEqual(warmup2.string_times('x', 4), 'xxxx')
        self.assertEqual(warmup2.string_times('', 4), '')
        self.assertEqual(warmup2.string_times('code', 2), 'codecode')
        self.assertEqual(warmup2.string_times('code', 3), 'codecodecode')
    
    def test_front_times(self):
        self.assertEqual(warmup2.front_times('Chocolate', 2), 'ChoCho')
        self.assertEqual(warmup2.front_times('Chocolate', 3), 'ChoChoCho')
        self.assertEqual(warmup2.front_times('Abc', 3), 'AbcAbcAbc')
        self.assertEqual(warmup2.front_times('Ab', 4), 'AbAbAbAb')
        self.assertEqual(warmup2.front_times('A', 4), 'AAAA')
        self.assertEqual(warmup2.front_times('', 4), '')
        self.assertEqual(warmup2.front_times('Abc', 0), '')

    def test_string_bits(self):
        self.assertEqual(warmup2.string_bits('Hello'), 'Hlo')
        self.assertEqual(warmup2.string_bits('Hi'), 'H')
        self.assertEqual(warmup2.string_bits('Heeololeo'), 'Hello')
        self.assertEqual(warmup2.string_bits('HiHiHi'), 'HHH')
        self.assertEqual(warmup2.string_bits(''), '')
        self.assertEqual(warmup2.string_bits('Greetings'), 'Getns')
        self.assertEqual(warmup2.string_bits('Chocoate'), 'Coot')
        self.assertEqual(warmup2.string_bits('pi'), 'p')
        self.assertEqual(warmup2.string_bits('Hello Kitten'), 'HloKte')
        self.assertEqual(warmup2.string_bits('hxaxpxpxy'), 'happy')

    def test_string_splosion(self):
        self.assertEqual(warmup2.string_splosion('Code'), 'CCoCodCode')
        self.assertEqual(warmup2.string_splosion('abc'), 'aababc' )
        self.assertEqual(warmup2.string_splosion('ab'), 'aab')
        self.assertEqual(warmup2.string_splosion('x'), 'x')
        self.assertEqual(warmup2.string_splosion('fade'), 'ffafadfade')
        self.assertEqual(warmup2.string_splosion('There'), 'TThTheTherThere' )
        self.assertEqual(warmup2.string_splosion('Kitten'), 'KKiKitKittKitteKitten' )
        self.assertEqual(warmup2.string_splosion('Bye'), 'BByBye' )
        self.assertEqual(warmup2.string_splosion('Good'), 'GGoGooGood' )
        self.assertEqual(warmup2.string_splosion('Bad'), 'BBaBad' )

    def test_last2(self):
        self.assertEqual(warmup2.last2('hixxhi'), 1)
        self.assertEqual(warmup2.last2('xaxxaxaxx'), 1)
        self.assertEqual(warmup2.last2('axxxaaxx'), 2)
        self.assertEqual(warmup2.last2('xxaxxaxxaxx'), 3)
        self.assertEqual(warmup2.last2('xaxaxaxx'), 0)
        self.assertEqual(warmup2.last2('xxxx'), 2)
        self.assertEqual(warmup2.last2('13121312'), 1)
        self.assertEqual(warmup2.last2('11212'), 1)
        self.assertEqual(warmup2.last2('13121311'), 0)
        self.assertEqual(warmup2.last2('1717171'), 2)
        self.assertEqual(warmup2.last2('hi'), 0)
        self.assertEqual(warmup2.last2('h'), 0)
        self.assertEqual(warmup2.last2(''), 0)

    def test_array_count9(self):
        self.assertEqual(warmup2.array_count9([1, 2, 9]), 1)
        self.assertEqual(warmup2.array_count9([1, 9, 9]), 2)
        self.assertEqual(warmup2.array_count9([1, 9, 9, 3, 9]), 3)
        self.assertEqual(warmup2.array_count9([1, 2, 3]), 0)
        self.assertEqual(warmup2.array_count9([]), 0)
        self.assertEqual(warmup2.array_count9([4, 2, 4, 3, 1]), 0)
        self.assertEqual(warmup2.array_count9([9, 2, 4, 3, 1]), 1)
    
    def test_array_front9(self):
        self.assertEqual(warmup2.array_front9([1, 2, 9, 3, 4]), True)
        self.assertEqual(warmup2.array_front9([1, 2, 3, 4, 9]), False)
        self.assertEqual(warmup2.array_front9([1, 2, 3, 4, 5]), False)
        self.assertEqual(warmup2.array_front9([9, 2, 3]), True )
        self.assertEqual(warmup2.array_front9([1, 9, 9]), True)
        self.assertEqual(warmup2.array_front9([1, 2, 3]), False)
        self.assertEqual(warmup2.array_front9([1, 9]), True)
        self.assertEqual(warmup2.array_front9([5, 5]), False)
        self.assertEqual(warmup2.array_front9([2]), False)
        self.assertEqual(warmup2.array_front9([9]), True)
        self.assertEqual(warmup2.array_front9([]), False)
        self.assertEqual(warmup2.array_front9([3, 9, 2, 3, 3]), True)
    
    def test_array123(self):
        self.assertEqual(warmup2.array123([1, 1, 2, 3, 1]), True)
        self.assertEqual(warmup2.array123([1, 1, 2, 4, 1]), False)
        self.assertEqual(warmup2.array123([1, 1, 2, 1, 2, 3]), True)
        self.assertEqual(warmup2.array123([1, 1, 2, 1, 2, 1]), False)
        self.assertEqual(warmup2.array123([1, 2, 3, 1, 2, 3]), True)
        self.assertEqual(warmup2.array123([1, 2, 3]), True)
        self.assertEqual(warmup2.array123([1, 1, 1]), False)
        self.assertEqual(warmup2.array123([1, 2]), False)
        self.assertEqual(warmup2.array123([1]), False )
        self.assertEqual(warmup2.array123([]), False)
    
    def test_string_match(self):
        self.assertEqual(warmup2.string_match('xxcaazz','xxbaaz'), 3)
        self.assertEqual(warmup2.string_match('abc','abc'), 2)
        self.assertEqual(warmup2.string_match('abc',  'axc'), 0)
        self.assertEqual(warmup2.string_match('hello','he'), 1)
        self.assertEqual(warmup2.string_match('he', 'hello'), 1)
        self.assertEqual(warmup2.string_match('h', 'hello'), 0)
        self.assertEqual(warmup2.string_match('', 'hello'), 0)
        self.assertEqual(warmup2.string_match('aabbccdd', 'abbbxxd'), 1)
        self.assertEqual(warmup2.string_match('aaxxaaxx', 'iaxxai'), 3)
        self.assertEqual(warmup2.string_match('iaxxai','aaxxaaxx'), 3)
    
    def test_back_around(self):
        self.assertEqual(warmup2.back_around('cat'), 'tcatt')
        self.assertEqual(warmup2.back_around('Hello'), 'oHelloo')
        self.assertEqual(warmup2.back_around('a'), 'aaa')
        self.assertEqual(warmup2.back_around('abc'), 'cabcc')
        self.assertEqual(warmup2.back_around('read'), 'dreadd')
        self.assertEqual(warmup2.back_around('boo'), 'obooo')
    
    def test_or_35(self):
        self.assertEqual(warmup2.or_35(3), True)
        self.assertEqual(warmup2.or_35(10), True)
        self.assertEqual(warmup2.or_35(8), False)
        self.assertEqual(warmup2.or_35(15), True)
        self.assertEqual(warmup2.or_35(5), True)
        self.assertEqual(warmup2.or_35(9), True)
        self.assertEqual(warmup2.or_35(4), False)
        self.assertEqual(warmup2.or_35(7), False)
        self.assertEqual(warmup2.or_35(6), True)
        self.assertEqual(warmup2.or_35(17), False)
        self.assertEqual(warmup2.or_35(18), True)
        self.assertEqual(warmup2.or_35(29), False)
        self.assertEqual(warmup2.or_35(20), True)
        self.assertEqual(warmup2.or_35(21), True)
        self.assertEqual(warmup2.or_35(22), False)
        self.assertEqual(warmup2.or_35(45), True)
        self.assertEqual(warmup2.or_35(99), True)
        self.assertEqual(warmup2.or_35(100), True)
        self.assertEqual(warmup2.or_35(101), False)
        self.assertEqual(warmup2.or_35(121), False)
        self.assertEqual(warmup2.or_35(122), False)
        self.assertEqual(warmup2.or_35(123), True)
    
    def test_front_22(self):
        self.assertEqual(warmup2.front_22('kitten'), 'kikittenki')
        self.assertEqual(warmup2.front_22('Ha'), 'HaHaHa')
        self.assertEqual(warmup2.front_22('abc'), 'ababcab')
        self.assertEqual(warmup2.front_22('ab'), 'ababab')
        self.assertEqual(warmup2.front_22('a'), 'aaa')
        self.assertEqual(warmup2.front_22(''), '')
        self.assertEqual(warmup2.front_22('Logic'), 'LoLogicLo')
    
    def test_start_hi(self):
        self.assertEqual(warmup2.start_hi('hi there'), True)
        self.assertEqual(warmup2.start_hi('hi'), True)
        self.assertEqual(warmup2.start_hi('hello hi'), False)
        self.assertEqual(warmup2.start_hi('he'), False)
        self.assertEqual(warmup2.start_hi('h'), False)
        self.assertEqual(warmup2.start_hi(''), False)
        self.assertEqual(warmup2.start_hi('ho hi'), False)
        self.assertEqual(warmup2.start_hi('hi ho'), True)
    
    def test_icy_hot(self):
        self.assertEqual(warmup2.icy_hot(120, -1), True)
        self.assertEqual(warmup2.icy_hot(-1, 120), True)
        self.assertEqual(warmup2.icy_hot(2, 120), False)
        self.assertEqual(warmup2.icy_hot(-1, 100), False)
        self.assertEqual(warmup2.icy_hot(-2, -2), False)
        self.assertEqual(warmup2.icy_hot(120, 120), False)
    
    def test_in_1020(self):
        self.assertEqual(warmup2.in_1020(12, 99), True)
        self.assertEqual(warmup2.in_1020(21, 12), True)
        self.assertEqual(warmup2.in_1020(8, 99), False)
        self.assertEqual(warmup2.in_1020(99, 10), True)
        self.assertEqual(warmup2.in_1020(20, 20), True)
        self.assertEqual(warmup2.in_1020(21, 21), False)
        self.assertEqual(warmup2.in_1020(9, 9), False)
    
    def test_has_teen(self):
        self.assertEqual(warmup2.has_teen(13, 20, 10), True)
        self.assertEqual(warmup2.has_teen(20, 19, 10), True)
        self.assertEqual(warmup2.has_teen(20, 10, 13), True)
        self.assertEqual(warmup2.has_teen(1, 20, 12), False)
        self.assertEqual(warmup2.has_teen(19, 20, 12), True)
        self.assertEqual(warmup2.has_teen(12, 20, 19), True)
        self.assertEqual(warmup2.has_teen(12, 9, 20), False)
        self.assertEqual(warmup2.has_teen(12, 18, 20), True)
        self.assertEqual(warmup2.has_teen(14, 2, 20), True)
        self.assertEqual(warmup2.has_teen(4, 2, 20), False)
        self.assertEqual(warmup2.has_teen(11, 22, 22), False)
    
    def test_lone_teen(self):
        self.assertEqual(warmup2.lone_teen(13, 99), True)
        self.assertEqual(warmup2.lone_teen(21, 19), True)
        self.assertEqual(warmup2.lone_teen(13, 13), False)
        self.assertEqual(warmup2.lone_teen(14, 20), True)
        self.assertEqual(warmup2.lone_teen(20, 15), True)
        self.assertEqual(warmup2.lone_teen(16, 17), False)
        self.assertEqual(warmup2.lone_teen(16, 9), True)
        self.assertEqual(warmup2.lone_teen(16, 18), False)
        self.assertEqual(warmup2.lone_teen(13, 19), False)
        self.assertEqual(warmup2.lone_teen(13, 20), True)
        self.assertEqual(warmup2.lone_teen(6, 18), True)
        self.assertEqual(warmup2.lone_teen(99, 13), True)
        self.assertEqual(warmup2.lone_teen(99, 99), False)
    
    def test_del_del(self):
        self.assertEqual(warmup2.del_del('adelbc'), 'abc')
        self.assertEqual(warmup2.del_del('adelHello'), 'aHello')
        self.assertEqual(warmup2.del_del('adedbc'), 'adedbc')
        self.assertEqual(warmup2.del_del('abcdel'), 'abcdel')
        self.assertEqual(warmup2.del_del('add'), 'add')
        self.assertEqual(warmup2.del_del('ad'), 'ad')
        self.assertEqual(warmup2.del_del('a'), 'a')
        self.assertEqual(warmup2.del_del(''), '')
        self.assertEqual(warmup2.del_del('del'), 'del')
        self.assertEqual(warmup2.del_del('adel'), 'a')
        self.assertEqual(warmup2.del_del('aadelbb'), 'aadelbb')
    
    def test_mix_start(self):
        self.assertEqual(warmup2.mix_start('mix snacks'), True)
        self.assertEqual(warmup2.mix_start('pix snacks'), True)
        self.assertEqual(warmup2.mix_start('piz snacks'), False)
        self.assertEqual(warmup2.mix_start('nix'), True)
        self.assertEqual(warmup2.mix_start('ni'), False)
        self.assertEqual(warmup2.mix_start('n'), False)
        self.assertEqual(warmup2.mix_start(''), False)
    
    def test_start_oz(self):
        self.assertEqual(warmup2.start_oz('ozymandias'), 'oz')
        self.assertEqual(warmup2.start_oz('bzoo'), 'z')
        self.assertEqual(warmup2.start_oz('oxx'), 'o')
        self.assertEqual(warmup2.start_oz('oz'), 'oz')
        self.assertEqual(warmup2.start_oz('ounce'), 'o')
        self.assertEqual(warmup2.start_oz('o'), 'o')
        self.assertEqual(warmup2.start_oz('abc'), '')
        self.assertEqual(warmup2.start_oz(''), '')
        self.assertEqual(warmup2.start_oz('zoo'), '')
        self.assertEqual(warmup2.start_oz('aztec'), 'z')
        self.assertEqual(warmup2.start_oz('zzzz'), 'z')
        self.assertEqual(warmup2.start_oz('oznic'), 'oz')
    
    def test_int_max(self):
        self.assertEqual(warmup2.int_max(1, 2, 3), 3)
        self.assertEqual(warmup2.int_max(1, 3, 2), 3)
        self.assertEqual(warmup2.int_max(3, 2, 1), 3)
        self.assertEqual(warmup2.int_max(9, 3, 3,), 9)
        self.assertEqual(warmup2.int_max(3, 9, 3), 9)
        self.assertEqual(warmup2.int_max(3, 3, 9), 9)
        self.assertEqual(warmup2.int_max(8, 2, 3), 8)
        self.assertEqual(warmup2.int_max(-3, -1, -2), -1)
        self.assertEqual(warmup2.int_max(6, 2, 5), 6)
        self.assertEqual(warmup2.int_max(5, 6, 2), 6)
        self.assertEqual(warmup2.int_max(5, 2, 6), 6)
    
    def test_close_10(self):
        self.assertEqual(warmup2.close_10(8, 13), 8)
        self.assertEqual(warmup2.close_10(13, 8), 8)
        self.assertEqual(warmup2.close_10(13, 7), 0)
        self.assertEqual(warmup2.close_10(7, 13), 0)
        self.assertEqual(warmup2.close_10(9, 13), 9)
        self.assertEqual(warmup2.close_10(13, 8), 8)
        self.assertEqual(warmup2.close_10(10, 12), 10)
        self.assertEqual(warmup2.close_10(11, 10), 10)
        self.assertEqual(warmup2.close_10(5, 21), 5)
        self.assertEqual(warmup2.close_10(0, 20), 0)
        self.assertEqual(warmup2.close_10(10, 10), 0)
    
    def test_in_30_50(self):
        self.assertEqual(warmup2.in_3040(30, 31), True)
        self.assertEqual(warmup2.in_3040(30, 41), False)
        self.assertEqual(warmup2.in_3040(40, 50), True)
        self.assertEqual(warmup2.in_3040(40, 51), False)
        self.assertEqual(warmup2.in_3040(39, 50), False)
        self.assertEqual(warmup2.in_3040(50, 39), False)
        self.assertEqual(warmup2.in_3040(40, 39), True)
        self.assertEqual(warmup2.in_3040(49, 48), True)
        self.assertEqual(warmup2.in_3040(50, 40), True)
        self.assertEqual(warmup2.in_3040(50, 51), False)
        self.assertEqual(warmup2.in_3040(35, 36), True)
        self.assertEqual(warmup2.in_3040(35, 45), False)
    
    def test_max_1020(self):
        self.assertEqual(warmup2.max_1020(11, 19), 19)
        self.assertEqual(warmup2.max_1020(19, 11), 19)
        self.assertEqual(warmup2.max_1020(11, 9), 11)
        self.assertEqual(warmup2.max_1020(9, 21), 0)
        self.assertEqual(warmup2.max_1020(10, 21), 10)
        self.assertEqual(warmup2.max_1020(21, 10), 10)
        self.assertEqual(warmup2.max_1020(9, 11), 11)
        self.assertEqual(warmup2.max_1020(23, 10), 10)
        self.assertEqual(warmup2.max_1020(20, 10), 20)
        self.assertEqual(warmup2.max_1020(7, 20), 20)
        self.assertEqual(warmup2.max_1020(17, 16), 17)

if __name__ == '__main__':
    unittest.main()