import unittest
import source.string3 as string3

class TestString3(unittest.TestCase):
    def test_count_yz(self):
        self.assertEqual(string3.count_yz('fez day'), 2)
        self.assertEqual(string3.count_yz('day fez'), 2)
        self.assertEqual(string3.count_yz('day fyyyz'), 2)
        self.assertEqual(string3.count_yz('day yak'), 1)
        self.assertEqual(string3.count_yz('day:yak'), 1)
        self.assertEqual(string3.count_yz('!!day--yaz!!'), 2)
        self.assertEqual(string3.count_yz('yak zak'), 0)
        self.assertEqual(string3.count_yz('DAY abc XYZ'), 2)
        self.assertEqual(string3.count_yz('aaz yyz my'), 3)
        self.assertEqual(string3.count_yz('y2bz'), 2)
        self.assertEqual(string3.count_yz('zxyx'), 0)
    
    def test_without_string(self):
        self.assertEqual(string3.without_string('Hello there', 'llo'), 'He there')
        self.assertEqual(string3.without_string('Hello there', 'e'), 'Hllo thr')
        self.assertEqual(string3.without_string('Hello there', 'x'), 'Hello there')
        self.assertEqual(string3.without_string('This is a FISH', 'IS'), 'Th a FH')
        self.assertEqual(string3.without_string('THIS is a FISH', 'is'),  'TH a FH')
        self.assertEqual(string3.without_string('THIS is a FISH', 'iS'), 'TH a FH')
        self.assertEqual(string3.without_string('abxxxxab', 'xx'),  'abab')
        self.assertEqual(string3.without_string('abxxxab', 'xx'), 'abxab')
        self.assertEqual(string3.without_string('abxxxab', 'x'), 'abab')
        self.assertEqual(string3.without_string('xxx', 'x'), '')
        self.assertEqual(string3.without_string('xxx', 'xx'), 'x')
        self.assertEqual(string3.without_string('xyzzy', 'Y'), 'xzz')
        self.assertEqual(string3.without_string('', 'x'), '')
        self.assertEqual(string3.without_string('abcabc', 'b'), 'acac')
        self.assertEqual(string3.without_string('AA22bb', '2'), 'AAbb')
        self.assertEqual(string3.without_string('1111', '1'), '')
        self.assertEqual(string3.without_string('1111', '11'), '')
        self.assertEqual(string3.without_string('MkjtMkx', 'Mk'), 'jtx')
        self.assertEqual(string3.without_string('Hi HoHo', 'Ho'), 'Hi ')
    
    def test_equal_is_not(self):
        self.assertEqual(string3.equal_is_not('This is not'), False)
        self.assertEqual(string3.equal_is_not('This is notnot'), True)
        self.assertEqual(string3.equal_is_not('noisxxnotyynotxisi'), True)
        self.assertEqual(string3.equal_is_not('noisxxnotyynotxsi'), False)
        self.assertEqual(string3.equal_is_not('xxxyyyzzzintint'), True)
        self.assertEqual(string3.equal_is_not(''), True)
        self.assertEqual(string3.equal_is_not('isisnotnot'), True)
        self.assertEqual(string3.equal_is_not('isisnotno7Not'), False)
        self.assertEqual(string3.equal_is_not('isnotis'), False)
        self.assertEqual(string3.equal_is_not('mis3notpotbotis'), False)
    
    def test_g_happy(self):
        self.assertEqual(string3.g_happy('xxggxx'), True)
        self.assertEqual(string3.g_happy('xxgxx'), False)
        self.assertEqual(string3.g_happy('xxggyygxx'), False)
        self.assertEqual(string3.g_happy('g'), False)
        self.assertEqual(string3.g_happy('gg'), True)
        self.assertEqual(string3.g_happy(''), True)
        self.assertEqual(string3.g_happy('xxgggxyz'), True)
        self.assertEqual(string3.g_happy('xxgggxyg'), False)
        self.assertEqual(string3.g_happy('xxgggxygg'), True)
        self.assertEqual(string3.g_happy('mgm'), False)
        self.assertEqual(string3.g_happy('mggm'), True)
        self.assertEqual(string3.g_happy('yyygggxyy'), True)
    
    def test_count_triple(self):
        self.assertEqual(string3.count_triple('abcXXXabc'), 1)
        self.assertEqual(string3.count_triple('xxxabyyyycd'), 3)
        self.assertEqual(string3.count_triple('a'), 0)
        self.assertEqual(string3.count_triple(''), 0)
        self.assertEqual(string3.count_triple('XXXabc'), 1)
        self.assertEqual(string3.count_triple('XXXXabc'), 2)
        self.assertEqual(string3.count_triple('XXXXXabc'), 3)
        self.assertEqual(string3.count_triple('222abyyycdXXX'), 3)
        self.assertEqual(string3.count_triple('abYYYabXXXXXab'), 4)
        self.assertEqual(string3.count_triple('abYYXabXXYXXab'), 0)
        self.assertEqual(string3.count_triple('abYYXabXXYXXab'), 0)
        self.assertEqual(string3.count_triple('122abhhh2'), 1)
    
    def test_sum_digits(self):
        self.assertEqual(string3.sum_digits('aa1bc2d3'), 6)
        self.assertEqual(string3.sum_digits('aa11b33'), 8)
        self.assertEqual(string3.sum_digits('Chocolate'), 0)
        self.assertEqual(string3.sum_digits('5hoco1a1e'), 7)
        self.assertEqual(string3.sum_digits('123abc123'), 12)
        self.assertEqual(string3.sum_digits(''), 0)
        self.assertEqual(string3.sum_digits('Hello'), 0)
        self.assertEqual(string3.sum_digits('X1z9b2'), 12)
        self.assertEqual(string3.sum_digits('5432a'), 14)

    def test_same_ends(self):
        self.assertEqual(string3.same_ends('abXYab'), 'ab')
        self.assertEqual(string3.same_ends('xx'), 'x')
        self.assertEqual(string3.same_ends('xxx'), 'x')
        self.assertEqual(string3.same_ends('xxxx'), 'xx')
        self.assertEqual(string3.same_ends('javaXYZjava'), 'java')
        self.assertEqual(string3.same_ends('javajava'), 'java')
        self.assertEqual(string3.same_ends('xavaXYZjava'), '')
        self.assertEqual(string3.same_ends('Hello! and Hello!'), 'Hello!')
        self.assertEqual(string3.same_ends('x'), '')
        self.assertEqual(string3.same_ends(''), '')
        self.assertEqual(string3.same_ends('abcb'),'' )
        self.assertEqual(string3.same_ends('mymmy'), 'my')
    
    def test_mirror_ends(self):
        self.assertEqual(string3.mirror_ends('abXYZba'), 'ab')
        self.assertEqual(string3.mirror_ends('abca'), 'a')
        self.assertEqual(string3.mirror_ends('aba'), 'aba')
        self.assertEqual(string3.mirror_ends('abab'), '')
        self.assertEqual(string3.mirror_ends('xxx'), 'xxx')
        self.assertEqual(string3.mirror_ends('xxYxx'), 'xxYxx')
        self.assertEqual(string3.mirror_ends('Hi and iH'), 'Hi ')
        self.assertEqual(string3.mirror_ends('x'), 'x'	)
        self.assertEqual(string3.mirror_ends(''), '')
        self.assertEqual(string3.mirror_ends('123and then 321'), '123')
        self.assertEqual(string3.mirror_ends('band andab'), 'ba')
    
    def test_max_block(self):
        self.assertEqual(string3.max_block('hoopla'), 2)
        self.assertEqual(string3.max_block('abbCCCddBBBxx'), 3)
        self.assertEqual(string3.max_block(''), 0)
        self.assertEqual(string3.max_block('xyz'), 1)
        self.assertEqual(string3.max_block('xxyz'), 2)
        self.assertEqual(string3.max_block('xyzz'), 2)
        self.assertEqual(string3.max_block('abbbcbbbxbbbx'), 3)
        self.assertEqual(string3.max_block('XXBBBbbxx'), 3)
        self.assertEqual(string3.max_block('XXBBBBbbxx'), 4)
        self.assertEqual(string3.max_block('XXBBBbbxxXXXX'),4 )
        self.assertEqual(string3.max_block('XX2222BBBbbXX2222'), 4)
    
    def test_sum_numbers(self):
        self.assertEqual(string3.sum_numbers('abc123xyz'), 123)
        self.assertEqual(string3.sum_numbers('aa11b33'), 44)
        self.assertEqual(string3.sum_numbers('7 11'), 18)
        self.assertEqual(string3.sum_numbers('Chocolate'), 0)
        self.assertEqual(string3.sum_numbers('5hoco1a1e'), 7)
        self.assertEqual(string3.sum_numbers('5$$1;;1!!'), 7)
        self.assertEqual(string3.sum_numbers('a1234bb11'), 1245)
        self.assertEqual(string3.sum_numbers(''), 0)
        self.assertEqual(string3.sum_numbers('a22bbb3'), 25)
    
    def test_not_replace(self):
        self.assertEqual(string3.not_replace('is test'), 'is not test')
        self.assertEqual(string3.not_replace('is-is'), 'is not-is not')
        self.assertEqual(string3.not_replace('This is right'), 'This is not right')
        self.assertEqual(string3.not_replace('This is isabell'), 'This is not isabell')
        self.assertEqual(string3.not_replace(''), '')
        self.assertEqual(string3.not_replace('is'), 'is not')
        self.assertEqual(string3.not_replace('isis'), 'isis')
        self.assertEqual(string3.not_replace('Dis is bliss is'), 'Dis is not bliss is not')
        self.assertEqual(string3.not_replace('is his'), 'is not his')
        self.assertEqual(string3.not_replace('xis yis'), 'xis yis')
        self.assertEqual(string3.not_replace('AAAis is'), 'AAAis is not')

if __name__ == '__main__':
    unittest.main()
