import unittest
import solutions.ap1 as ap1

class TestAP1(unittest.TestCase):
    def test_scores_increasing(self):
        self.assertEqual(ap1.scores_increasing([1, 3, 4]), True)
        self.assertEqual(ap1.scores_increasing([1, 3, 2]), False)
        self.assertEqual(ap1.scores_increasing([1, 1, 4]), True)
        self.assertEqual(ap1.scores_increasing([1, 1, 2, 4, 4, 7]), True)
        self.assertEqual(ap1.scores_increasing([1, 1, 2, 4, 3, 7]), False)
        self.assertEqual(ap1.scores_increasing([-5, 4, 11]), True)
    
    def test_scores_100(self):
        self.assertEqual(ap1.scores_100([1, 100, 100]), True)
        self.assertEqual(ap1.scores_100([1, 100, 99, 100]), False)
        self.assertEqual(ap1.scores_100([100, 1, 100, 100]), True)
        self.assertEqual(ap1.scores_100([100, 1, 100, 1]), False)
        self.assertEqual(ap1.scores_100([1, 2, 3, 4, 5]), False)
        self.assertEqual(ap1.scores_100([1, 2, 100, 4, 5]), False)

    def test_scores_clump(self):
        self.assertEqual(ap1.scores_clump([3, 4, 5]), True)
        self.assertEqual(ap1.scores_clump([3, 4, 6]), False)
        self.assertEqual(ap1.scores_clump([1, 3, 5, 5]), True)
        self.assertEqual(ap1.scores_clump([2, 4, 5, 6]), True)
        self.assertEqual(ap1.scores_clump([2, 4, 5, 7]), False)
        self.assertEqual(ap1.scores_clump([2, 4, 4, 7]), True)
        self.assertEqual(ap1.scores_clump([3, 3, 6, 7, 9]), False)
        self.assertEqual(ap1.scores_clump([3, 3, 7, 7, 9]), True)
        self.assertEqual(ap1.scores_clump([4, 5, 8]), False)
    
    def test_scores_average(self):
        self.assertEqual(ap1.scores_average([2, 2, 4, 4]), 4)
        self.assertEqual(ap1.scores_average([4, 4, 4, 2, 2, 2]), 4)
        self.assertEqual(ap1.scores_average([3, 4, 5, 1, 2, 3]), 4)
        self.assertEqual(ap1.scores_average([5, 6]), 6)
        self.assertEqual(ap1.scores_average([5, 4]), 5)
        self.assertEqual(ap1.scores_average([5, 4, 5, 6, 2, 1, 2, 3]), 5)

    def test_words_count(self):
        self.assertEqual(ap1.words_count(["a", "bb", "b", "ccc"], 1), 2)
        self.assertEqual(ap1.words_count(["a", "bb", "b", "ccc"], 3), 1)
        self.assertEqual(ap1.words_count(["a", "bb", "b", "ccc"], 4), 0)
        self.assertEqual(ap1.words_count(["xx", "yyy", "x", "yy", "z"], 1), 2)
        self.assertEqual(ap1.words_count(["xx", "yyy", "x", "yy", "z"], 2), 2)
        self.assertEqual(ap1.words_count(["xx", "yyy", "x", "yy", "z"], 3), 1)
    
    def test_words_front(self):
        self.assertEqual(ap1.words_front(["a", "b", "c", "d"], 1), ["a"])
        self.assertEqual(ap1.words_front(["a", "b", "c", "d"], 2), ["a", "b"])
        self.assertEqual(ap1.words_front(["a", "b", "c", "d"], 3), ["a", "b", "c"])
        self.assertEqual(ap1.words_front(["a", "b", "c", "d"], 4),  ["a", "b", "c", "d"])
        self.assertEqual(ap1.words_front(["Hi", "There"], 1), ["Hi"])
        self.assertEqual(ap1.words_front(["Hi", "There"], 2), ["Hi", "There"])
    
    def test_words_without_list(self):
        self.assertEqual(ap1.words_without_list(["a", "bb", "b", "ccc"], 1), ["bb", "ccc"])
        self.assertEqual(ap1.words_without_list(["a", "bb", "b", "ccc"], 3), ["a", "bb", "b"])
        self.assertEqual(ap1.words_without_list(["a", "bb", "b", "ccc"], 4), ["a", "bb", "b", "ccc"])
        self.assertEqual(ap1.words_without_list(["xx", "yyy", "x", "yy", "z"], 1), ["xx", "yyy", "yy"])
        self.assertEqual(ap1.words_without_list(["xx", "yyy", "x", "yy", "z"], 2), ["yyy", "x", "z"])
    
    def test_has_one(self):
        self.assertEqual(ap1.has_one(10), True)
        self.assertEqual(ap1.has_one(22), False)
        self.assertEqual(ap1.has_one(220), False)
        self.assertEqual(ap1.has_one(212), True)
        self.assertEqual(ap1.has_one(1), True)
        self.assertEqual(ap1.has_one(9), False)
        self.assertEqual(ap1.has_one(211112), True)
        self.assertEqual(ap1.has_one(121121), True)
        self.assertEqual(ap1.has_one(222222), False)
        self.assertEqual(ap1.has_one(56156), True)
        self.assertEqual(ap1.has_one(56556), False)
    
    def test_divides_self(self):
        self.assertEqual(ap1.divides_self(128), True)
        self.assertEqual(ap1.divides_self(12), True)
        self.assertEqual(ap1.divides_self(120), False)
        self.assertEqual(ap1.divides_self(122), True)
        self.assertEqual(ap1.divides_self(13), False)
        self.assertEqual(ap1.divides_self(32), False)
        self.assertEqual(ap1.divides_self(22), True)
        self.assertEqual(ap1.divides_self(42), False)
        self.assertEqual(ap1.divides_self(212), True)
        self.assertEqual(ap1.divides_self(213), False)
        self.assertEqual(ap1.divides_self(162), True)
    
    def test_copy_evens(self):
        self.assertEqual(ap1.copy_evens([3, 2, 4, 5, 8], 2), [2, 4])
        self.assertEqual(ap1.copy_evens([3, 2, 4, 5, 8], 3), [2, 4, 8])
        self.assertEqual(ap1.copy_evens([6, 1, 2, 4, 5, 8], 3), [6, 2, 4])
        self.assertEqual(ap1.copy_evens([6, 1, 2, 4, 5, 8], 4), [6, 2, 4, 8])
        self.assertEqual(ap1.copy_evens([3, 1, 4, 1, 5], 1), [4])
        self.assertEqual(ap1.copy_evens([2], 1), [2])
        self.assertEqual(ap1.copy_evens([6, 2, 4, 8], 2), [6, 2])
        self.assertEqual(ap1.copy_evens([6, 2, 4, 8], 3), [6, 2, 4])
        self.assertEqual(ap1.copy_evens([6, 2, 4, 8], 4), [6, 2, 4, 8])
        self.assertEqual(ap1.copy_evens([1, 8, 4], 1), [8])
        self.assertEqual(ap1.copy_evens([1, 8, 4], 2), [8, 4])
        self.assertEqual(ap1.copy_evens([2, 8, 4], 2), [2, 8])
    
    def test_copy_endy(self):
        self.assertEqual(ap1.copy_endy([9, 11, 90, 22, 6], 2), [9, 90])
        self.assertEqual(ap1.copy_endy([9, 11, 90, 22, 6], 3), [9, 90, 6])
        self.assertEqual(ap1.copy_endy([12, 1, 1, 13, 0, 20], 2), [1, 1])
        self.assertEqual(ap1.copy_endy([12, 1, 1, 13, 0, 20], 3), [1, 1, 0])
        self.assertEqual(ap1.copy_endy([0], 1), [0])
        self.assertEqual(ap1.copy_endy([10, 11, 90], 2), [10, 90])
        self.assertEqual(ap1.copy_endy([90, 22, 100], 2), [90, 100])
        self.assertEqual(ap1.copy_endy([12, 11, 10, 89, 101, 4], 1), [10])
        self.assertEqual(ap1.copy_endy([13, 2, 2, 0], 2), [2, 2])
        self.assertEqual(ap1.copy_endy([13, 2, 2, 0], 3), [2, 2, 0])
        self.assertEqual(ap1.copy_endy([13, 2, 13, 2, 0, 30], 2), [2, 2])
        self.assertEqual(ap1.copy_endy([13, 2, 13, 2, 0, 30], 3), [2, 2, 0])
    
    def test_match_up(self):
        self.assertEqual(ap1.match_up(["aa", "bb", "cc"], ["aaa", "xx", "bb"]), 1)
        self.assertEqual(ap1.match_up(["aa", "bb", "cc"], ["aaa", "b", "bb"]), 2)
        self.assertEqual(ap1.match_up(["aa", "bb", "cc"], ["", "", "ccc"]), 1)
        self.assertEqual(ap1.match_up(["", "", "ccc"], ["aa", "bb", "cc"]), 1)
        self.assertEqual(ap1.match_up(["", "", ""], ["", "bb", "cc"]), 0)
        self.assertEqual(ap1.match_up(["aa", "bb", "cc"], ["", "", ""]), 0)
        self.assertEqual(ap1.match_up(["aa", "", "ccc"], ["", "bb", "cc"]), 1)
        self.assertEqual(ap1.match_up(["x", "y", "z"], ["y", "z", "x"]), 0)
        self.assertEqual(ap1.match_up(["", "y", "z"], ["", "y", "x"]), 1)
        self.assertEqual(ap1.match_up(["x", "y", "z"], ["xx", "yyy", "zzz"]), 3)
        self.assertEqual(ap1.match_up(["x", "y", "z"], ["xx", "yyy", ""]), 2)
        self.assertEqual(ap1.match_up(["b", "x", "y", "z"], ["a", "xx", "yyy", "zzz"]), 3)
        self.assertEqual(ap1.match_up(["aaa", "bb", "c"], ["aaa", "xx", "bb"]), 1)
    
    def test_score_up(self):
        self.assertEqual(ap1.score_up(["a", "a", "b", "b"], ["a", "c", "b", "c"]), 6)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b"], ["a", "a", "b", "c"]), 11)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b"], ["a", "a", "b", "b"]), 16)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b"], ["?", "c", "b", "?"]), 3)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b"], ["?", "c", "?", "?"]), -1)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b"], ["c", "?", "b", "b"]), 7)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b"], ["c", "?", "b", "?"]), 3)
        self.assertEqual(ap1.score_up(["a", "b", "c"], ["a", "c", "b"]), 2)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b", "c", "c"], ["a", "c", "a", "c", "a", "c"]), 4)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b", "c", "c"], ["a", "c", "?", "?", "a", "c"]), 6)
        self.assertEqual(ap1.score_up(["a", "a", "b", "b", "c", "c"], ["a", "c", "?", "?", "c", "c"]), 11)
        self.assertEqual(ap1.score_up(["a", "b", "c"], ["a", "b", "c"]), 12)
    
    def test_words_without(self):
        self.assertEqual(ap1.words_without(["a", "b", "c", "a"], "a"), ["b", "c"])
        self.assertEqual(ap1.words_without(["a", "b", "c", "a"], "b"), ["a", "c", "a"])
        self.assertEqual(ap1.words_without(["a", "b", "c", "a"], "c"), ["a", "b", "a"])
        self.assertEqual(ap1.words_without(["b", "c", "a", "a"], "b"), ["c", "a", "a"])
        self.assertEqual(ap1.words_without(["xx", "yyy", "x", "yy", "x"], "x"), ["xx", "yyy", "yy"])
        self.assertEqual(ap1.words_without(["xx", "yyy", "x", "yy", "x"], "yy"), ["xx", "yyy", "x", "x"])
        self.assertEqual(ap1.words_without(["aa", "ab", "ac", "aa"], "aa"), ["ab", "ac"])
    
    def test_scores_special(self):
        self.assertEqual(ap1.scores_special([12, 10, 4], [2, 20, 30]), 40)
        self.assertEqual(ap1.scores_special([20, 10, 4], [2, 20, 10]), 40)
        self.assertEqual(ap1.scores_special([12, 11, 4], [2, 20, 31]), 20)
        self.assertEqual(ap1.scores_special([1, 20, 2, 50], [3, 4, 5]), 50)
        self.assertEqual(ap1.scores_special([3, 4, 5], [1, 50, 2, 20]), 50)
        self.assertEqual(ap1.scores_special([10, 4, 20, 30], [20]), 50)
        self.assertEqual(ap1.scores_special([10, 4, 20, 30], [20]), 50)
        self.assertEqual(ap1.scores_special([10, 4, 20, 30], [3, 20, 99]), 50)
        self.assertEqual(ap1.scores_special([10, 4, 20, 30], [30, 20, 99]), 60)
        self.assertEqual(ap1.scores_special([], [2]), 0)
        self.assertEqual(ap1.scores_special([], [20]), 20)
        self.assertEqual(ap1.scores_special([14, 10, 4], [4, 20, 30]), 40)
    
    def test_sum_heights(self):
        self.assertEqual(ap1.sum_heights([5, 3, 6, 7, 2], 2, 4), 6)
        self.assertEqual(ap1.sum_heights([5, 3, 6, 7, 2], 0, 1), 2)
        self.assertEqual(ap1.sum_heights([5, 3, 6, 7, 2], 0, 4), 11)
        self.assertEqual(ap1.sum_heights([5, 3, 6, 7, 2], 1, 1), 0)
        self.assertEqual(ap1.sum_heights([1, 2, 3, 4, 5, 4, 3, 2, 10], 0, 3), 3)
        self.assertEqual(ap1.sum_heights([1, 2, 3, 4, 5, 4, 3, 2, 10], 4, 8), 11)
        self.assertEqual(ap1.sum_heights([1, 2, 3, 4, 5, 4, 3, 2, 10], 7, 8), 8)
        self.assertEqual(ap1.sum_heights([1, 2, 3, 4, 5, 4, 3, 2, 10], 8, 8), 0)
        self.assertEqual(ap1.sum_heights([1, 2, 3, 4, 5, 4, 3, 2, 10], 2, 2), 0)
        self.assertEqual(ap1.sum_heights([1, 2, 3, 4, 5, 4, 3, 2, 10], 3, 6), 3)
        self.assertEqual(ap1.sum_heights([10, 8, 7, 7, 7, 6, 7], 1, 4), 1)
        self.assertEqual(ap1.sum_heights([10, 8, 7, 7, 7, 6, 7], 1, 5), 2)
    
    def test_sum_heights_2(self):
        self.assertEqual(ap1.sum_heights_2([5, 3, 6, 7, 2], 2, 4), 7)
        self.assertEqual(ap1.sum_heights_2([5, 3, 6, 7, 2], 0, 1), 2)
        self.assertEqual(ap1.sum_heights_2([5, 3, 6, 7, 2], 0, 4), 15)
        self.assertEqual(ap1.sum_heights_2([5, 3, 6, 7, 2], 1, 1), 0)
        self.assertEqual(ap1.sum_heights_2([1, 2, 3, 4, 5, 4, 3, 2, 10], 0, 3), 6)
        self.assertEqual(ap1.sum_heights_2([1, 2, 3, 4, 5, 4, 3, 2, 10], 4, 8), 19)
        self.assertEqual(ap1.sum_heights_2([1, 2, 3, 4, 5, 4, 3, 2, 10], 7, 8), 16)
        self.assertEqual(ap1.sum_heights_2([1, 2, 3, 4, 5, 4, 3, 2, 10], 8, 8), 0)
        self.assertEqual(ap1.sum_heights_2([1, 2, 3, 4, 5, 4, 3, 2, 10], 2, 2), 0)
        self.assertEqual(ap1.sum_heights_2([1, 2, 3, 4, 5, 4, 3, 2, 10], 3, 6), 4)
        self.assertEqual(ap1.sum_heights_2([10, 8, 7, 7, 7, 6, 7], 1, 4), 1)
        self.assertEqual(ap1.sum_heights_2([10, 8, 7, 7, 7, 6, 7], 1, 5), 2)
    
    def test_big_heights(self):
        self.assertEqual(ap1.big_heights([5, 3, 6, 7, 2], 2, 4), 1)
        self.assertEqual(ap1.big_heights([5, 3, 6, 7, 2], 0, 1), 0)
        self.assertEqual(ap1.big_heights([5, 3, 6, 7, 2], 0, 4), 1)
        self.assertEqual(ap1.big_heights([5, 3, 6, 7, 3], 0, 4), 0)
        self.assertEqual(ap1.big_heights([5, 3, 6, 7, 2], 1, 1), 0)
        self.assertEqual(ap1.big_heights([5, 13, 6, 7, 2], 1, 2), 1)
        self.assertEqual(ap1.big_heights([5, 13, 6, 7, 2], 0, 2), 2)
        self.assertEqual(ap1.big_heights([5, 13, 6, 7, 2], 1, 4), 2)
        self.assertEqual(ap1.big_heights([5, 13, 6, 7, 2], 0, 4), 3)
        self.assertEqual(ap1.big_heights([5, 13, 6, 7, 2], 0, 3), 2)
        self.assertEqual(ap1.big_heights([1, 2, 3, 4, 5, 4, 3, 2, 10], 0, 3), 0)
        self.assertEqual(ap1.big_heights([1, 2, 3, 4, 5, 4, 3, 2, 10], 4, 8), 1)
        self.assertEqual(ap1.big_heights([1, 2, 3, 14, 5, 4, 3, 2, 10], 0, 3), 1)
        self.assertEqual(ap1.big_heights([1, 2, 3, 14, 5, 4, 3, 2, 10], 7, 8), 1)
        self.assertEqual(ap1.big_heights([1, 2, 3, 14, 5, 4, 3, 2, 10], 3, 8), 2)
        self.assertEqual(ap1.big_heights([1, 2, 3, 14, 5, 4, 3, 2, 10], 2, 8), 3)
    
    def test_user_compare(self):
        self.assertEqual(ap1.user_compare("bb", 1, "zz", 2), -1)
        self.assertEqual(ap1.user_compare("bb", 1, "aa", 2), 1)
        self.assertEqual(ap1.user_compare("bb", 1, "bb", 1), 0)
        self.assertEqual(ap1.user_compare("bb", 5, "bb", 1), 1)
        self.assertEqual(ap1.user_compare("bb", 5, "bb", 10), -1)
        self.assertEqual(ap1.user_compare("adam", 1, "bob", 2), -1)
        self.assertEqual(ap1.user_compare("bob", 1, "bob", 2), -1)
        self.assertEqual(ap1.user_compare("bzb", 1, "bob", 2), 1)
    
    def test_merge_two(self):
        self.assertEqual(ap1.merge_two(["a", "c", "z"], ["b", "f", "z"], 3), ["a", "b", "c"])
        self.assertEqual(ap1.merge_two(["a", "c", "z"], ["c", "f", "z"], 3), ["a", "c", "f"])
        self.assertEqual(ap1.merge_two(["f", "g", "z"], ["c", "f", "g"], 3), ["c", "f", "g"])
        self.assertEqual(ap1.merge_two(["a", "c", "z"], ["a", "c", "z"], 3), ["a", "c", "z"])
        self.assertEqual(ap1.merge_two(["a", "b", "c", "z"], ["a", "c", "z"], 3), ["a", "b", "c"])
        self.assertEqual(ap1.merge_two(["a", "c", "z"], ["a", "b", "c", "z"], 3), ["a", "b", "c"])
        self.assertEqual(ap1.merge_two(["a", "c", "z"], ["a", "c", "z"], 2), ["a", "c"])
        self.assertEqual(ap1.merge_two(["a", "c", "z"], ["a", "c", "y", "z"], 3), ["a", "c", "y"])
        self.assertEqual(ap1.merge_two(["x", "y", "z"], ["a", "b", "z"], 3), ["a", "b", "x"])
    
    def test_common_two(self):
        self.assertEqual(ap1.common_two(["a", "c", "x"], ["b", "c", "d", "x"]), 2)
        self.assertEqual(ap1.common_two(["a", "c", "x"], ["a", "b", "c", "x", "z"]), 3)
        self.assertEqual(ap1.common_two(["a", "b", "c"], ["a", "b", "c"]), 3)
        self.assertEqual(ap1.common_two(["a", "a", "b", "b", "c"], ["a", "b", "c"]), 3)
        self.assertEqual(ap1.common_two(["a", "a", "b", "b", "c"], ["a", "b", "b", "b", "c"]), 3)
        self.assertEqual(ap1.common_two(["a", "a", "b", "b", "c"], ["a", "b", "b", "c", "c"]), 3)
        self.assertEqual(ap1.common_two(["b", "b", "b", "b", "c"], ["a", "b", "b", "b", "c"]), 2)
        self.assertEqual(ap1.common_two(["a", "b", "c", "c", "d"], ["a", "b", "b", "c", "d", "d"]), 4)
        self.assertEqual(ap1.common_two(["a", "a", "b", "b", "c"], ["b", "b", "b"]), 1)
        self.assertEqual(ap1.common_two(["a", "a", "b", "b", "c"], ["c", "c"]), 1)
        self.assertEqual(ap1.common_two(["a", "a", "b", "b", "c"], ["b", "b", "b", "x"]), 1)
        self.assertEqual(ap1.common_two(["a", "a", "b", "b", "c"], ["b", "b"]), 1)
        self.assertEqual(ap1.common_two(["a"], ["a", "b"]), 1)
        self.assertEqual(ap1.common_two(["a"], ["b"]), 0)
        self.assertEqual(ap1.common_two(["a", "a"], ["b", "b"]), 0)
        self.assertEqual(ap1.common_two(["a", "b"], ["a", "b"]), 2)

if __name__ == '__main__':
    unittest.main()