import unittest
import solutions.logic2 as logic2

class Logic2Test(unittest.TestCase):
    def test_make_bricks(self):
        self.assertEqual(logic2.make_bricks(3, 1, 8), True)
        self.assertEqual(logic2.make_bricks(3, 1, 9), False)
        self.assertEqual(logic2.make_bricks(3, 2, 10), True)
        self.assertEqual(logic2.make_bricks(3, 2, 8), True)
        self.assertEqual(logic2.make_bricks(3, 2, 9), False)
        self.assertEqual(logic2.make_bricks(6, 1, 11), True)
        self.assertEqual(logic2.make_bricks(6, 0, 11), False)
        self.assertEqual(logic2.make_bricks(1, 4, 11), True)
        self.assertEqual(logic2.make_bricks(0, 3, 10), True)
        self.assertEqual(logic2.make_bricks(1, 4, 12), False)
        self.assertEqual(logic2.make_bricks(3, 1, 7), True)
        self.assertEqual(logic2.make_bricks(1, 1, 7), False)
        self.assertEqual(logic2.make_bricks(2, 1, 7), True)
        self.assertEqual(logic2.make_bricks(7, 1, 11), True)
        self.assertEqual(logic2.make_bricks(7, 1, 8), True)
        self.assertEqual(logic2.make_bricks(7, 1, 13), False)
        self.assertEqual(logic2.make_bricks(43, 1, 46), True)
        self.assertEqual(logic2.make_bricks(40, 1, 46), False)
        self.assertEqual(logic2.make_bricks(40, 2, 47), True)
        self.assertEqual(logic2.make_bricks(40, 2, 50), True)
        self.assertEqual(logic2.make_bricks(40, 2, 52), False)
        self.assertEqual(logic2.make_bricks(22, 2, 33), False)
        self.assertEqual(logic2.make_bricks(0, 2, 10), True)
        self.assertEqual(logic2.make_bricks(1000000, 1000, 1000100), True)
        self.assertEqual(logic2.make_bricks(2, 1000000, 100003), False)
        self.assertEqual(logic2.make_bricks(20, 0, 19), True)
        self.assertEqual(logic2.make_bricks(20, 0, 21), False)
        self.assertEqual(logic2.make_bricks(20, 4, 51), False)
        self.assertEqual(logic2.make_bricks(20, 4, 39), True)
    
    def test_lone_sum(self):
        self.assertEqual(logic2.lone_sum(1, 2, 3), 6)
        self.assertEqual(logic2.lone_sum(3, 2, 3), 2)
        self.assertEqual(logic2.lone_sum(3, 3, 3), 0)
        self.assertEqual(logic2.lone_sum(9, 2, 2), 9)
        self.assertEqual(logic2.lone_sum(2, 2, 9), 9)
        self.assertEqual(logic2.lone_sum(2, 9, 2), 9)
        self.assertEqual(logic2.lone_sum(2, 9, 3), 14)
        self.assertEqual(logic2.lone_sum(4, 2, 3), 9)
        self.assertEqual(logic2.lone_sum(1, 3, 1), 3)
    
    def test_lucky_sum(self):
        self.assertEqual(logic2.lucky_sum(1, 2, 3), 6)
        self.assertEqual(logic2.lucky_sum(1, 2, 13), 3)
        self.assertEqual(logic2.lucky_sum(1, 13, 3), 1)
        self.assertEqual(logic2.lucky_sum(1, 13, 13), 1)
        self.assertEqual(logic2.lucky_sum(6, 5, 2), 13)
        self.assertEqual(logic2.lucky_sum(13, 2, 3), 0)
        self.assertEqual(logic2.lucky_sum(13, 2, 13), 0)
        self.assertEqual(logic2.lucky_sum(13, 13, 2), 0)
        self.assertEqual(logic2.lucky_sum(9, 4, 13), 13)
        self.assertEqual(logic2.lucky_sum(8, 13, 2), 8)
        self.assertEqual(logic2.lucky_sum(7, 2, 1), 10)
        self.assertEqual(logic2.lucky_sum(3, 3, 13), 6)
    
    def test_no_teen_sum(self):
        self.assertEqual(logic2.no_teen_sum(1, 2, 3), 6)
        self.assertEqual(logic2.no_teen_sum(2, 13, 1), 3)
        self.assertEqual(logic2.no_teen_sum(2, 1, 14), 3)
        self.assertEqual(logic2.no_teen_sum(2, 1, 15), 18)
        self.assertEqual(logic2.no_teen_sum(2, 1, 16), 19)
        self.assertEqual(logic2.no_teen_sum(2, 1, 17), 3)
        self.assertEqual(logic2.no_teen_sum(17, 1, 2), 3)
        self.assertEqual(logic2.no_teen_sum(2, 15, 2), 19)
        self.assertEqual(logic2.no_teen_sum(16, 17, 18), 16)
        self.assertEqual(logic2.no_teen_sum(17, 18, 19), 0)
        self.assertEqual(logic2.no_teen_sum(15, 16, 1), 32)
        self.assertEqual(logic2.no_teen_sum(15, 15, 19), 30)
        self.assertEqual(logic2.no_teen_sum(15, 19, 16), 31)
        self.assertEqual(logic2.no_teen_sum(5, 17, 18), 5)
        self.assertEqual(logic2.no_teen_sum(17, 18, 16), 16)
        self.assertEqual(logic2.no_teen_sum(17, 19, 18), 0) 
    
    def test_round_sum(self):
        self.assertEqual(logic2.round_sum(16, 17, 18), 60)
        self.assertEqual(logic2.round_sum(12, 13, 14), 30)
        self.assertEqual(logic2.round_sum(6, 4, 4), 10)
        self.assertEqual(logic2.round_sum(4, 6, 5), 20)
        self.assertEqual(logic2.round_sum(4, 4, 6), 10)
        self.assertEqual(logic2.round_sum(9, 4, 4), 10)
        self.assertEqual(logic2.round_sum(0, 0, 1), 0)
        self.assertEqual(logic2.round_sum(0, 9, 0), 10)
        self.assertEqual(logic2.round_sum(10, 10, 19), 40)
        self.assertEqual(logic2.round_sum(20, 30, 40), 90)
        self.assertEqual(logic2.round_sum(45, 21, 30), 100)
        self.assertEqual(logic2.round_sum(23, 11, 26), 60)
        self.assertEqual(logic2.round_sum(23, 24, 25), 70)
        self.assertEqual(logic2.round_sum(25, 24, 25), 80)
        self.assertEqual(logic2.round_sum(23, 24, 29), 70)
        self.assertEqual(logic2.round_sum(11, 24, 36), 70)
        self.assertEqual(logic2.round_sum(24, 36, 32), 90)
        self.assertEqual(logic2.round_sum(14, 12, 26), 50)
        self.assertEqual(logic2.round_sum(12, 10, 24), 40)
    
    def test_close_far(self):
        self.assertEqual(logic2.close_far(1, 2, 10), True)
        self.assertEqual(logic2.close_far(1, 2, 3), False)
        self.assertEqual(logic2.close_far(4, 1, 3), True)
        self.assertEqual(logic2.close_far(4, 5, 3), False)
        self.assertEqual(logic2.close_far(4, 3, 5), False)
        self.assertEqual(logic2.close_far(-1, 10, 0), True)
        self.assertEqual(logic2.close_far(0, -1, 10), True)
        self.assertEqual(logic2.close_far(10, 10, 8), True)
        self.assertEqual(logic2.close_far(10, 8, 9), False)
        self.assertEqual(logic2.close_far(8, 9, 10), False)
        self.assertEqual(logic2.close_far(8, 9, 7), False)
        self.assertEqual(logic2.close_far(8, 6, 9), True)
    
    def test_blackjack(self):
        self.assertEqual(logic2.blackjack(19, 21), 21)
        self.assertEqual(logic2.blackjack(21, 19), 21)
        self.assertEqual(logic2.blackjack(19, 22), 19)
        self.assertEqual(logic2.blackjack(22, 19), 19)
        self.assertEqual(logic2.blackjack(22, 50), 0)
        self.assertEqual(logic2.blackjack(22, 22), 0)
        self.assertEqual(logic2.blackjack(33, 1), 1)
        self.assertEqual(logic2.blackjack(1, 2), 2)
        self.assertEqual(logic2.blackjack(34, 33), 0)
        self.assertEqual(logic2.blackjack(17, 19), 19)
        self.assertEqual(logic2.blackjack(18, 17), 18)
        self.assertEqual(logic2.blackjack(16, 23), 16)
        self.assertEqual(logic2.blackjack(3, 4), 4)
        self.assertEqual(logic2.blackjack(3, 2), 3)
        self.assertEqual(logic2.blackjack(21, 20), 21)
    
    def test_evenly_spaces(self):
        self.assertEqual(logic2.evenly_spaces(2, 4, 6), True)
        self.assertEqual(logic2.evenly_spaces(4, 6, 2), True)
        self.assertEqual(logic2.evenly_spaces(4, 6, 3), False)
        self.assertEqual(logic2.evenly_spaces(6, 2, 4), True)
        self.assertEqual(logic2.evenly_spaces(6, 2, 8), False)
        self.assertEqual(logic2.evenly_spaces(2, 2, 2), True)
        self.assertEqual(logic2.evenly_spaces(2, 2, 3), False)
        self.assertEqual(logic2.evenly_spaces(9, 10, 11), True)
        self.assertEqual(logic2.evenly_spaces(10, 9, 11), True)
        self.assertEqual(logic2.evenly_spaces(10, 9, 9), False)
        self.assertEqual(logic2.evenly_spaces(2, 4, 4), False)
        self.assertEqual(logic2.evenly_spaces(2, 2, 4), False)
        self.assertEqual(logic2.evenly_spaces(3, 6, 12), False)
        self.assertEqual(logic2.evenly_spaces(12, 3, 6), False)
    
    def test_make_chocolate(self):
        self.assertEqual(logic2.make_chocolate(4, 1, 9), 4)
        self.assertEqual(logic2.make_chocolate(4, 1, 10), -1)
        self.assertEqual(logic2.make_chocolate(4, 1, 7), 2)
        self.assertEqual(logic2.make_chocolate(6, 2, 7), 2)
        self.assertEqual(logic2.make_chocolate(4, 1, 5), 0)
        self.assertEqual(logic2.make_chocolate(4, 1, 4), 4)
        self.assertEqual(logic2.make_chocolate(5, 4, 9), 4)
        self.assertEqual(logic2.make_chocolate(9, 3, 18), 3)
        self.assertEqual(logic2.make_chocolate(3, 1, 9), -1)
        self.assertEqual(logic2.make_chocolate(1, 2, 7), -1)
        self.assertEqual(logic2.make_chocolate(1, 2, 6), 1)
        self.assertEqual(logic2.make_chocolate(1, 2, 5), 0)
        self.assertEqual(logic2.make_chocolate(6, 1, 10), 5)
        self.assertEqual(logic2.make_chocolate(6, 1, 11), 6)
        self.assertEqual(logic2.make_chocolate(6, 1, 12), -1)
        self.assertEqual(logic2.make_chocolate(6, 1, 13), -1)
        self.assertEqual(logic2.make_chocolate(6, 2, 10), 0)
        self.assertEqual(logic2.make_chocolate(6, 2, 11), 1)
        self.assertEqual(logic2.make_chocolate(6, 2, 12), 2)
        self.assertEqual(logic2.make_chocolate(60, 100, 550), 50)
        self.assertEqual(logic2.make_chocolate(1000, 1000000, 5000006), 6)
        self.assertEqual(logic2.make_chocolate(7, 1, 12), 7)
        self.assertEqual(logic2.make_chocolate(7, 1, 13), -1)
        self.assertEqual(logic2.make_chocolate(7, 2, 13), 3)

if __name__ == '__main__':
    unittest.main()
