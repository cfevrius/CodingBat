import unittest
import solutions.recursion1 as recursion1

class TestRecursion1(unittest.TestCase):
    def test_factorial(self):
        self.assertEqual(recursion1.factorial(1), 1) 
        self.assertEqual(recursion1.factorial(2), 2) 
        self.assertEqual(recursion1.factorial(3), 6) 
        self.assertEqual(recursion1.factorial(4), 24) 
        self.assertEqual(recursion1.factorial(5), 120) 
        self.assertEqual(recursion1.factorial(6), 720) 
        self.assertEqual(recursion1.factorial(7), 5040) 
        self.assertEqual(recursion1.factorial(8), 40320) 
        self.assertEqual(recursion1.factorial(12), 479001600) 

    def test_bunny_ears(self):
        self.assertEqual(recursion1.bunny_ears(0), 0) 
        self.assertEqual(recursion1.bunny_ears(1), 2) 
        self.assertEqual(recursion1.bunny_ears(2), 4) 
        self.assertEqual(recursion1.bunny_ears(3), 6) 
        self.assertEqual(recursion1.bunny_ears(4), 8) 
        self.assertEqual(recursion1.bunny_ears(5), 10) 
        self.assertEqual(recursion1.bunny_ears(12), 24) 
        self.assertEqual(recursion1.bunny_ears(50), 100) 
        self.assertEqual(recursion1.bunny_ears(234), 468) 
    
    def test_fibonacci(self):
        self.assertEqual(recursion1.fibonacci(0), 0) 
        self.assertEqual(recursion1.fibonacci(1), 1) 
        self.assertEqual(recursion1.fibonacci(2), 1) 
        self.assertEqual(recursion1.fibonacci(3), 2) 
        self.assertEqual(recursion1.fibonacci(4), 3) 
        self.assertEqual(recursion1.fibonacci(5), 5) 
        self.assertEqual(recursion1.fibonacci(6), 8) 
        self.assertEqual(recursion1.fibonacci(7), 13) 
    
    def test_bunny_ears2(self):
        self.assertEqual(recursion1.bunny_ears2(0), 0) 
        self.assertEqual(recursion1.bunny_ears2(1), 2) 
        self.assertEqual(recursion1.bunny_ears2(2), 5) 
        self.assertEqual(recursion1.bunny_ears2(3), 7) 
        self.assertEqual(recursion1.bunny_ears2(4), 10) 
        self.assertEqual(recursion1.bunny_ears2(5), 12) 
        self.assertEqual(recursion1.bunny_ears2(6), 15) 
        self.assertEqual(recursion1.bunny_ears2(10), 25) 
    
    def test_triangle(self):
        self.assertEqual(recursion1.triangle(0), 0) 
        self.assertEqual(recursion1.triangle(1), 1) 
        self.assertEqual(recursion1.triangle(2), 3) 
        self.assertEqual(recursion1.triangle(3), 6) 
        self.assertEqual(recursion1.triangle(4), 10) 
        self.assertEqual(recursion1.triangle(5), 15) 
        self.assertEqual(recursion1.triangle(6), 21) 
        self.assertEqual(recursion1.triangle(7), 28) 
    
    def test_sum_digits(self):
        self.assertEqual(recursion1.sum_digits(126), 9) 
        self.assertEqual(recursion1.sum_digits(49), 13) 
        self.assertEqual(recursion1.sum_digits(12), 3) 
        self.assertEqual(recursion1.sum_digits(10), 1) 
        self.assertEqual(recursion1.sum_digits(1), 1) 
        self.assertEqual(recursion1.sum_digits(0), 0) 
        self.assertEqual(recursion1.sum_digits(730), 10) 
        self.assertEqual(recursion1.sum_digits(1111), 4) 
        self.assertEqual(recursion1.sum_digits(11111), 5) 
        self.assertEqual(recursion1.sum_digits(10110), 3) 
        self.assertEqual(recursion1.sum_digits(235), 10) 
    
    def test_count7(self):
        self.assertEqual(recursion1.count7(717), 2) 
        self.assertEqual(recursion1.count7(7), 1) 
        self.assertEqual(recursion1.count7(123), 0) 
        self.assertEqual(recursion1.count7(77), 2) 
        self.assertEqual(recursion1.count7(7123), 1) 
        self.assertEqual(recursion1.count7(771237), 3) 
        self.assertEqual(recursion1.count7(771737), 4) 
        self.assertEqual(recursion1.count7(47571), 2) 
        self.assertEqual(recursion1.count7(777777), 6) 
        self.assertEqual(recursion1.count7(70701277), 4) 
        self.assertEqual(recursion1.count7(777576197), 5) 
        self.assertEqual(recursion1.count7(99999), 0) 
        self.assertEqual(recursion1.count7(99799), 1) 
    
    def test_count8(self):
        self.assertEqual(recursion1.count8(8), 1) 
        self.assertEqual(recursion1.count8(818), 2) 
        self.assertEqual(recursion1.count8(8818), 4) 
        self.assertEqual(recursion1.count8(8088), 4) 
        self.assertEqual(recursion1.count8(123), 0) 
        self.assertEqual(recursion1.count8(81238), 2) 
        self.assertEqual(recursion1.count8(88788), 6) 
        self.assertEqual(recursion1.count8(8234), 1) 
        self.assertEqual(recursion1.count8(2348), 1) 
        self.assertEqual(recursion1.count8(23884), 3) 
        self.assertEqual(recursion1.count8(0), 0) 
        self.assertEqual(recursion1.count8(1818188), 5) 
        self.assertEqual(recursion1.count8(8818181), 5) 
        self.assertEqual(recursion1.count8(1080), 1) 
        self.assertEqual(recursion1.count8(188), 3) 
        self.assertEqual(recursion1.count8(88888), 9) 
        self.assertEqual(recursion1.count8(9898), 2) 
        self.assertEqual(recursion1.count8(78), 1) 
    
    def test_power_n(self):
        self.assertEqual(recursion1.power_n(3, 1), 3) 
        self.assertEqual(recursion1.power_n(3, 2), 9) 
        self.assertEqual(recursion1.power_n(3, 3), 27) 
        self.assertEqual(recursion1.power_n(2, 1), 2) 
        self.assertEqual(recursion1.power_n(2, 2), 4) 
        self.assertEqual(recursion1.power_n(2, 3), 8) 
        self.assertEqual(recursion1.power_n(2, 4), 16) 
        self.assertEqual(recursion1.power_n(2, 5), 32) 
        self.assertEqual(recursion1.power_n(10, 1), 10) 
        self.assertEqual(recursion1.power_n(10, 2), 100) 
        self.assertEqual(recursion1.power_n(10, 3), 1000) 
    
    def test_count_x(self):
        self.assertEqual(recursion1.count_x('xxhixx'), 4) 
        self.assertEqual(recursion1.count_x('xhixhix'), 3) 
        self.assertEqual(recursion1.count_x('hi'), 0) 
        self.assertEqual(recursion1.count_x('h'), 0) 
        self.assertEqual(recursion1.count_x('x'), 1) 
        self.assertEqual(recursion1.count_x(''), 0) 
        self.assertEqual(recursion1.count_x('hihi'), 0) 
        self.assertEqual(recursion1.count_x('hiAAhi12hi'), 0) 
    
    def test_count_hi(self):
        self.assertEqual(recursion1.count_hi('xxhixx'), 1) 
        self.assertEqual(recursion1.count_hi('xhixhix'), 2) 
        self.assertEqual(recursion1.count_hi('hi'), 1) 
        self.assertEqual(recursion1.count_hi('hihih'), 2) 
        self.assertEqual(recursion1.count_hi('h'), 0) 
        self.assertEqual(recursion1.count_hi(''), 0) 
        self.assertEqual(recursion1.count_hi('ihihihihih'), 4) 
        self.assertEqual(recursion1.count_hi('ihihihihihi'), 5) 
        self.assertEqual(recursion1.count_hi('hiAAhi12hi'), 3) 
        self.assertEqual(recursion1.count_hi('xhixhxihihhhih'), 3) 
        self.assertEqual(recursion1.count_hi('ship'), 1) 
    
    def test_change_xy(self):
        self.assertEqual(recursion1.change_xy('codex'), 'codey') 
        self.assertEqual(recursion1.change_xy('xxhixx'), 'yyhiyy') 
        self.assertEqual(recursion1.change_xy('xhixhix'), 'yhiyhiy') 
        self.assertEqual(recursion1.change_xy('hiy'), 'hiy') 
        self.assertEqual(recursion1.change_xy('h'), 'h') 
        self.assertEqual(recursion1.change_xy('x'), 'y') 
        self.assertEqual(recursion1.change_xy(''), '') 
        self.assertEqual(recursion1.change_xy('xxx'), 'yyy') 
        self.assertEqual(recursion1.change_xy('yyhxyi'), 'yyhyyi') 
        self.assertEqual(recursion1.change_xy('hihi'), 'hihi') 

    def test_change_pi(self):
        self.assertEqual(recursion1.change_pi('xpix'), 'x3.14x'	) 
        self.assertEqual(recursion1.change_pi('pipi'), '3.143.14') 
        self.assertEqual(recursion1.change_pi('pip'), '3.14p') 
        self.assertEqual(recursion1.change_pi('pi'), '3.14') 
        self.assertEqual(recursion1.change_pi('hip'), 'hip') 
        self.assertEqual(recursion1.change_pi('p'), 'p') 
        self.assertEqual(recursion1.change_pi('x'), 'x') 
        self.assertEqual(recursion1.change_pi(''), '') 
        self.assertEqual(recursion1.change_pi('pixx'), '3.14xx') 
        self.assertEqual(recursion1.change_pi('xyzzy'), 'xyzzy') 

    def test_no_x(self):
        self.assertEqual(recursion1.no_x('xaxb'), 'ab') 
        self.assertEqual(recursion1.no_x('abc'), 'abc') 
        self.assertEqual(recursion1.no_x('xx'), '') 
        self.assertEqual(recursion1.no_x(''), '') 
        self.assertEqual(recursion1.no_x('axxbxx'), 'ab') 
        self.assertEqual(recursion1.no_x('Hellox'), 'Hello') 
    
    def test_array6(self):
        self.assertEqual(recursion1.array6([1, 6, 4], 0), True) 
        self.assertEqual(recursion1.array6([1, 4], 0), False) 
        self.assertEqual(recursion1.array6([6], 0), True) 
        self.assertEqual(recursion1.array6([], 0), False) 
        self.assertEqual(recursion1.array6([6, 2, 2], 0), True) 
        self.assertEqual(recursion1.array6([2, 5], 0), False) 
        self.assertEqual(recursion1.array6([1, 9, 4, 6, 6], 0), True) 
        self.assertEqual(recursion1.array6([2, 5, 6], 0), True) 
    
    def test_array11(self):
        self.assertEqual(recursion1.array11([1, 2, 11], 0), 1) 
        self.assertEqual(recursion1.array11([11, 11], 0), 2) 
        self.assertEqual(recursion1.array11([1, 2, 3, 4], 0), 0) 
        self.assertEqual(recursion1.array11([1, 11, 3, 11, 11], 0), 3) 
        self.assertEqual(recursion1.array11([11], 0), 1) 
        self.assertEqual(recursion1.array11([1], 0), 0) 
        self.assertEqual(recursion1.array11([], 0), 0) 
        self.assertEqual(recursion1.array11([11, 2, 3, 4, 11, 5], 0), 2) 
        self.assertEqual(recursion1.array11([11, 5, 11], 0), 2) 
    
    def test_array_220(self):
        self.assertEqual(recursion1.array_220([1, 2, 20], 0), True) 
        self.assertEqual(recursion1.array_220([3, 30], 0), True) 
        self.assertEqual(recursion1.array_220([3], 0), False) 
        self.assertEqual(recursion1.array_220([], 0), False) 
        self.assertEqual(recursion1.array_220([3, 3, 30, 4], 0), True) 
        self.assertEqual(recursion1.array_220([2, 19, 4], 0), False) 
        self.assertEqual(recursion1.array_220([20, 2, 21], 0), False) 
        self.assertEqual(recursion1.array_220([20, 2, 21, 210], 0), True) 
        self.assertEqual(recursion1.array_220([2, 200, 2000], 0), True) 
        self.assertEqual(recursion1.array_220([0, 0], 0), True) 
        self.assertEqual(recursion1.array_220([1, 2, 3, 4, 5, 6], 0), False) 
        self.assertEqual(recursion1.array_220([1, 2, 3, 4, 5, 50, 6], 0), True) 
        self.assertEqual(recursion1.array_220([1, 2, 3, 4, 5, 51, 6], 0), False) 
        self.assertEqual(recursion1.array_220([1, 2, 3, 4, 4, 50, 500, 6], 0), True) 
    
    def test_all_star(self):
        self.assertEqual(recursion1.all_star('hello'),  'h*e*l*l*o') 
        self.assertEqual(recursion1.all_star('abc'), 'a*b*c') 
        self.assertEqual(recursion1.all_star('ab'), 'a*b') 
        self.assertEqual(recursion1.all_star('a'), 'a') 
        self.assertEqual(recursion1.all_star(''), '') 
        self.assertEqual(recursion1.all_star('3.14'), '3*.*1*4') 
        self.assertEqual(recursion1.all_star('Chocolate'), 'C*h*o*c*o*l*a*t*e') 
        self.assertEqual(recursion1.all_star('1234'), '1*2*3*4') 

    def test_pair_star(self):
        self.assertEqual(recursion1.pair_star('hello'), 'hel*lo') 
        self.assertEqual(recursion1.pair_star('xxyy'), 'x*xy*y') 
        self.assertEqual(recursion1.pair_star('aaaa'), 'a*a*a*a') 
        self.assertEqual(recursion1.pair_star('aaab'), 'a*a*ab') 
        self.assertEqual(recursion1.pair_star('aa'), 'a*a') 
        self.assertEqual(recursion1.pair_star('a'), 'a') 
        self.assertEqual(recursion1.pair_star(''), '') 
        self.assertEqual(recursion1.pair_star('noadjacent'), 'noadjacent') 
        self.assertEqual(recursion1.pair_star('abba'), 'ab*ba') 
        self.assertEqual(recursion1.pair_star('abbba'), 'ab*b*ba') 

    def test_end_x(self):
        self.assertEqual(recursion1.end_x('xxre'), 'rexx') 
        self.assertEqual(recursion1.end_x('xxhixx'), 'hixxxx') 
        self.assertEqual(recursion1.end_x('xhixhix'), 'hihixxx') 
        self.assertEqual(recursion1.end_x('hiy'), 'hiy') 
        self.assertEqual(recursion1.end_x('h'), 'h') 
        self.assertEqual(recursion1.end_x('x'), 'x') 
        self.assertEqual(recursion1.end_x('xx'), 'xx') 
        self.assertEqual(recursion1.end_x(''), '') 
        self.assertEqual(recursion1.end_x('bxx'), 'bxx') 
        self.assertEqual(recursion1.end_x('bxax'), 'baxx') 
        self.assertEqual(recursion1.end_x('axaxax'), 'aaaxxx') 
        self.assertEqual(recursion1.end_x('xxhxi'), 'hixxx') 
    
    def test_count_pairs(self):
        self.assertEqual(recursion1.count_pairs('axa'), 1) 
        self.assertEqual(recursion1.count_pairs('axax'), 2) 
        self.assertEqual(recursion1.count_pairs('axbx'), 1) 
        self.assertEqual(recursion1.count_pairs('hi'), 0) 
        self.assertEqual(recursion1.count_pairs('hihih'), 3) 
        self.assertEqual(recursion1.count_pairs('ihihhh'), 3) 
        self.assertEqual(recursion1.count_pairs('ihjxhh'), 0) 
        self.assertEqual(recursion1.count_pairs(''), 0) 
        self.assertEqual(recursion1.count_pairs('a'), 0) 
        self.assertEqual(recursion1.count_pairs('aa'), 0) 
        self.assertEqual(recursion1.count_pairs('aaa'), 1) 
    
    def test_count_abc(self):
        self.assertEqual(recursion1.count_abc('abc'), 1) 
        self.assertEqual(recursion1.count_abc('abcxxabc'), 2) 
        self.assertEqual(recursion1.count_abc('abaxxaba'), 2) 
        self.assertEqual(recursion1.count_abc('ababc'), 2) 
        self.assertEqual(recursion1.count_abc('abxbc'), 0) 
        self.assertEqual(recursion1.count_abc('aaabc'), 1) 
        self.assertEqual(recursion1.count_abc('hello'), 0) 
        self.assertEqual(recursion1.count_abc(''), 0) 
        self.assertEqual(recursion1.count_abc('ab'), 0) 
        self.assertEqual(recursion1.count_abc('aba'), 1) 
        self.assertEqual(recursion1.count_abc('aca'), 0) 
        self.assertEqual(recursion1.count_abc('aaa'), 0) 

    def test_count11(self):
        self.assertEqual(recursion1.count11('11abc11'), 2) 
        self.assertEqual(recursion1.count11('abc11x11x11'), 3) 
        self.assertEqual(recursion1.count11('111'), 1) 
        self.assertEqual(recursion1.count11('1111'), 2) 
        self.assertEqual(recursion1.count11('1'), 0) 
        self.assertEqual(recursion1.count11(''), 0) 
        self.assertEqual(recursion1.count11('hi'), 0) 
        self.assertEqual(recursion1.count11('11x111x1111'), 4) 
        self.assertEqual(recursion1.count11('1x111'), 1) 
        self.assertEqual(recursion1.count11('1Hello1'), 0) 
        self.assertEqual(recursion1.count11('Hello'), 0) 
    
    def test_string_clean(self):
        self.assertEqual(recursion1.string_clean('yyzzza'), 'yza') 
        self.assertEqual(recursion1.string_clean('abbbcdd'), 'abcd') 
        self.assertEqual(recursion1.string_clean('Hello'), 'Helo') 
        self.assertEqual(recursion1.string_clean('XXabcYY'), 'XabcY') 
        self.assertEqual(recursion1.string_clean('112ab445'), '12ab45') 
        self.assertEqual(recursion1.string_clean('Hello Bookkeeper'), 'Helo Bokeper') 
    
    def test_count_hi2(self):
        self.assertEqual(recursion1.count_hi_2('ahixhi'), 1) 
        self.assertEqual(recursion1.count_hi_2('ahibhi'), 2) 
        self.assertEqual(recursion1.count_hi_2('xhixhi'), 0) 
        self.assertEqual(recursion1.count_hi_2('hixhi'), 1) 
        self.assertEqual(recursion1.count_hi_2('hixhhi'), 2) 
        self.assertEqual(recursion1.count_hi_2('hihihi'), 3) 
        self.assertEqual(recursion1.count_hi_2('hihihix'), 3) 
        self.assertEqual(recursion1.count_hi_2('xhihihix'), 2) 
        self.assertEqual(recursion1.count_hi_2('xxhi'), 0) 
        self.assertEqual(recursion1.count_hi_2('hixxhi'), 1) 
        self.assertEqual(recursion1.count_hi_2('hi'), 1) 
        self.assertEqual(recursion1.count_hi_2('xxxx'), 0) 
        self.assertEqual(recursion1.count_hi_2('h'), 0) 
        self.assertEqual(recursion1.count_hi_2('x'), 0) 
        self.assertEqual(recursion1.count_hi_2(''), 0) 
        self.assertEqual(recursion1.count_hi_2('Hellohi'), 1) 
    
    def test_paren_bit(self):
        self.assertEqual(recursion1.paren_bit('xyz(abc)123'), '(abc)') 
        self.assertEqual(recursion1.paren_bit('x(hello)'), '(hello)') 
        self.assertEqual(recursion1.paren_bit('(xy)1'), '(xy)') 
        self.assertEqual(recursion1.paren_bit('not really (possible)'), '(possible)') 
        self.assertEqual(recursion1.paren_bit('(abc)'), '(abc)') 
        self.assertEqual(recursion1.paren_bit('(abc)xyz'), '(abc)') 
        self.assertEqual(recursion1.paren_bit('(abc)x'), '(abc)') 
        self.assertEqual(recursion1.paren_bit('(x)'), '(x)') 
        self.assertEqual(recursion1.paren_bit('()'), '()') 
        self.assertEqual(recursion1.paren_bit('res (ipsa) loquitor'), '(ipsa)') 
        self.assertEqual(recursion1.paren_bit('hello(not really)there'), '(not really)') 
        self.assertEqual(recursion1.paren_bit('ab(ab)ab'), '(ab)') 
    
    def test_nest_parens(self):
        self.assertEqual(recursion1.nest_paren('(())'), True) 
        self.assertEqual(recursion1.nest_paren('((()))'), True) 
        self.assertEqual(recursion1.nest_paren('(((x))'), False) 
        self.assertEqual(recursion1.nest_paren('((())'), False) 
        self.assertEqual(recursion1.nest_paren('((()()'), False) 
        self.assertEqual(recursion1.nest_paren('()'), True) 
        self.assertEqual(recursion1.nest_paren(''), True) 
        self.assertEqual(recursion1.nest_paren('(yy)'), False) 
        self.assertEqual(recursion1.nest_paren('(())'), True) 
        self.assertEqual(recursion1.nest_paren('(((y))'), False) 
        self.assertEqual(recursion1.nest_paren('((y)))'), False) 
        self.assertEqual(recursion1.nest_paren('((()))'), True) 
        self.assertEqual(recursion1.nest_paren('(())))'), False) 
        self.assertEqual(recursion1.nest_paren('((yy())))'), False) 
        self.assertEqual(recursion1.nest_paren('(((())))'), True) 
    
    def test_str_count(self):
        self.assertEqual(recursion1.str_count('catcowcat', 'cat'), 2) 
        self.assertEqual(recursion1.str_count('catcowcat', 'cow'), 1) 
        self.assertEqual(recursion1.str_count('catcowcat', 'dog'), 0) 
        self.assertEqual(recursion1.str_count('cacatcowcat', 'cat'), 2) 
        self.assertEqual(recursion1.str_count('xyx', 'x'), 2) 
        self.assertEqual(recursion1.str_count('iiiijj', 'i'), 4) 
        self.assertEqual(recursion1.str_count('iiiijj', 'ii'), 2) 
        self.assertEqual(recursion1.str_count('iiiijj', 'iii'), 1) 
        self.assertEqual(recursion1.str_count('iiiijj', 'j'), 2) 
        self.assertEqual(recursion1.str_count('iiiijj', 'jj'), 1) 
        self.assertEqual(recursion1.str_count('aaabababab', 'ab'), 4) 
        self.assertEqual(recursion1.str_count('aaabababab', 'aa'), 1) 
        self.assertEqual(recursion1.str_count('aaabababab', 'a'), 6) 
        self.assertEqual(recursion1.str_count('aaabababab', 'b'), 4) 
    
    def test_str_copies(self):
        self.assertEqual(recursion1.str_copies('catcowcat', 'cat', 2), True) 
        self.assertEqual(recursion1.str_copies('catcowcat', 'cow', 2), False) 
        self.assertEqual(recursion1.str_copies('catcowcat', 'cow', 1), True) 
        self.assertEqual(recursion1.str_copies('iiijjj', 'i', 3), True) 
        self.assertEqual(recursion1.str_copies('iiijjj', 'i', 4), False) 
        self.assertEqual(recursion1.str_copies('iiijjj', 'ii', 2), True) 
        self.assertEqual(recursion1.str_copies('iiijjj', 'ii', 3), False) 
        self.assertEqual(recursion1.str_copies('iiijjj', 'x', 3), False) 
        self.assertEqual(recursion1.str_copies('iiijjj', 'x', 0), True) 
        self.assertEqual(recursion1.str_copies('iiiiij', 'iii', 3), True) 
        self.assertEqual(recursion1.str_copies('iiiiij', 'iii', 4), False) 
        self.assertEqual(recursion1.str_copies('ijiiiiij', 'iiii', 2), True) 
        self.assertEqual(recursion1.str_copies('ijiiiiij', 'iiii', 3), False) 
        self.assertEqual(recursion1.str_copies('dogcatdogcat', 'dog', 2), True) 
    
    def test_str_dist(self):
        self.assertEqual(recursion1.str_dist('catcowcat', 'cat'), 9) 
        self.assertEqual(recursion1.str_dist('catcowcat', 'cow'), 3) 
        self.assertEqual(recursion1.str_dist('cccatcowcatxx', 'cat'), 9) 
        self.assertEqual(recursion1.str_dist('abccatcowcatcatxyz', 'cat'), 12) 
        self.assertEqual(recursion1.str_dist('xyx', 'x'), 3) 
        self.assertEqual(recursion1.str_dist('xyx', 'y'), 1) 
        self.assertEqual(recursion1.str_dist('xyx', 'z'), 0) 
        self.assertEqual(recursion1.str_dist('z', 'z'), 1) 
        self.assertEqual(recursion1.str_dist('x', 'z'), 0) 
        self.assertEqual(recursion1.str_dist('', 'z'), 0) 
        self.assertEqual(recursion1.str_dist('hiHellohihihi', 'hi'), 13) 
        self.assertEqual(recursion1.str_dist('hiHellohihihi', 'hih'), 5) 
        self.assertEqual(recursion1.str_dist('hiHellohihihi', 'o'), 1) 
        self.assertEqual(recursion1.str_dist('hiHellohihihi', 'll'), 2) 

if __name__ == '__main__':
    unittest.main()