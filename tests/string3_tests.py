import sys
sys.path.append('')

import unittest
import solutions.string3 as string3

class TestString3(unittest.TestCase):
    def test_count_yz(self):
        self.assertEqual(string3.count_yz("fez day"), 2)
        self.assertEqual(string3.count_yz("day fez"), 2)
        self.assertEqual(string3.count_yz("day fyyyz"), 2)
        self.assertEqual(string3.count_yz("day yak"), 1)
        self.assertEqual(string3.count_yz("day:yak"), 1)
        self.assertEqual(string3.count_yz("!!day--yaz!!"), 2)
        self.assertEqual(string3.count_yz("yak zak"), 0)
        self.assertEqual(string3.count_yz("DAY abc XYZ"), 2)
        self.assertEqual(string3.count_yz("aaz yyz my"), 3)
        self.assertEqual(string3.count_yz("y2bz"), 2)
        self.assertEqual(string3.count_yz("zxyx"), 0)
    
    def test_without_string(self):
        self.assertEqual(string3.without_string("Hello there", "llo"), "He there")
        self.assertEqual(string3.without_string("Hello there", "e"), "Hllo thr")
        self.assertEqual(string3.without_string("Hello there", "x"), "Hello there")
        self.assertEqual(string3.without_string("This is a FISH", "IS"), "Th a FH")
        self.assertEqual(string3.without_string("THIS is a FISH", "is"),  "TH a FH")
        self.assertEqual(string3.without_string("THIS is a FISH", "iS"), "TH a FH")
        self.assertEqual(string3.without_string("abxxxxab", "xx"),  "abab")
        self.assertEqual(string3.without_string("abxxxab", "xx"), "abxab")
        self.assertEqual(string3.without_string("abxxxab", "x"), "abab")
        self.assertEqual(string3.without_string("xxx", "x"), "")
        self.assertEqual(string3.without_string("xxx", "xx"), "x")
        self.assertEqual(string3.without_string("xyzzy", "Y"), "xzz")
        self.assertEqual(string3.without_string("", "x"), "")
        self.assertEqual(string3.without_string("abcabc", "b"), "acac")
        self.assertEqual(string3.without_string("AA22bb", "2"), "AAbb")
        self.assertEqual(string3.without_string("1111", "1"), "")
        self.assertEqual(string3.without_string("1111", "11"), "")
        self.assertEqual(string3.without_string("MkjtMkx", "Mk"), "jtx")
        self.assertEqual(string3.without_string("Hi HoHo", "Ho"), "Hi ")
    
    def test_equal_is_not(self):
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
        self.assertEqual(string3.equal_is_not(), )
    
    def test_g_happy(self):
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
        self.assertEqual(string3.g_happy(), )
    
    def test_count_triple(self):
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
        self.assertEqual(string3.count_triple(), )
    
    def test_sum_digits(self):
        self.assertEqual(string3.sum_digits(), )
        self.assertEqual(string3.sum_digits(), )
        self.assertEqual(string3.sum_digits(), )
        self.assertEqual(string3.sum_digits(), )
        self.assertEqual(string3.sum_digits(), )
        self.assertEqual(string3.sum_digits(), )
        self.assertEqual(string3.sum_digits(), )
        self.assertEqual(string3.sum_digits(), )
        self.assertEqual(string3.sum_digits(), )

    def test_same_ends(self):
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
        self.assertEqual(string3.same_ends(), )
    
    def test_mirror_ends(self):
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
        self.assertEqual(string3.mirror_ends(), )
    
    def test_max_block(self):
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
        self.assertEqual(string3.max_block(), )
    
    def test_sum_numbers(self):
        self.assertEqual(string3.sum_numbers(), )
        self.assertEqual(string3.sum_numbers(), )
        self.assertEqual(string3.sum_numbers(), )
        self.assertEqual(string3.sum_numbers(), )
        self.assertEqual(string3.sum_numbers(), )
        self.assertEqual(string3.sum_numbers(), )
        self.assertEqual(string3.sum_numbers(), )
        self.assertEqual(string3.sum_numbers(), )
        self.assertEqual(string3.sum_numbers(), )
    
    def test_not_replace(self):
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )
        self.assertEqual(string3.not_replace(), )

if __name__ == '__main__':
    unittest.main()
