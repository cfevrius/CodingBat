import unittest
import warmup1

class TestWarmUp1(unittest.TestCase):

    def test_sleep_in(self):
        self.assertEqual(warmup1.sleep_in(False, False), True)
        self.assertEqual(warmup1.sleep_in(True, False), False)
        self.assertEqual(warmup1.sleep_in(False, True), True)
        self.assertEqual(warmup1.sleep_in(True, True), True)
    
    def test_monkey_trouble(self): 
        self.assertEqual(warmup1.monkey_trouble(True, True), True)
        self.assertEqual(warmup1.monkey_trouble(False, False), True)
        self.assertEqual(warmup1.monkey_trouble(True, False), False)
        self.assertEqual(warmup1.monkey_trouble(False, True), False)
    
    def test_sum_double(self):
        self.assertEqual(warmup1.sum_double(1, 2), 3)
        self.assertEqual(warmup1.sum_double(3, 2), 5)
        self.assertEqual(warmup1.sum_double(2, 2), 8)
        self.assertEqual(warmup1.sum_double(-1, 0), -1)
        self.assertEqual(warmup1.sum_double(3, 3), 12)
        self.assertEqual(warmup1.sum_double(0, 0), 0)
        self.assertEqual(warmup1.sum_double(0, 1), 1)
        self.assertEqual(warmup1.sum_double(3, 4), 7)
    
    def test_diff21(self):
        self.assertEqual( warmup1.diff_21(19), 2)
        self.assertEqual( warmup1.diff_21(10), 11)
        self.assertEqual( warmup1.diff_21(21), 0)
        self.assertEqual( warmup1.diff_21(22), 2)
        self.assertEqual( warmup1.diff_21(25), 8)
        self.assertEqual( warmup1.diff_21(30), 18)
        self.assertEqual( warmup1.diff_21(0), 21)
        self.assertEqual( warmup1.diff_21(1), 20)
        self.assertEqual( warmup1.diff_21(2), 19)
        self.assertEqual( warmup1.diff_21(-1), 22)
        self.assertEqual( warmup1.diff_21(-2), 23)
        self.assertEqual( warmup1.diff_21(50), 58)

    def test_parrot_trouble(self):
        self.assertEqual(warmup1.parrot_trouble(True, 6), True )
        self.assertEqual(warmup1.parrot_trouble(True, 7), False)
        self.assertEqual(warmup1.parrot_trouble(False, 6), False)
        self.assertEqual(warmup1.parrot_trouble(True, 21), True)
        self.assertEqual(warmup1.parrot_trouble(False, 21), False)
        self.assertEqual(warmup1.parrot_trouble(False, 20), False)
        self.assertEqual(warmup1.parrot_trouble(True, 23), True)
        self.assertEqual(warmup1.parrot_trouble(False, 23), False)
        self.assertEqual(warmup1.parrot_trouble(True, 20), False)
        self.assertEqual(warmup1.parrot_trouble(False, 12), False)

    def test_makes_10(self):
        self.assertEqual( warmup1.makes_10(9, 10), True)
        self.assertEqual( warmup1.makes_10(9, 9), False)
        self.assertEqual( warmup1.makes_10(1, 9), True)
        self.assertEqual( warmup1.makes_10(10, 1), True)
        self.assertEqual( warmup1.makes_10(10, 10), True)
        self.assertEqual( warmup1.makes_10(8, 2), True)
        self.assertEqual( warmup1.makes_10(8, 3), False)
        self.assertEqual( warmup1.makes_10(10, 42), True)
        self.assertEqual( warmup1.makes_10(12, -2), True)

    def test_near_hundred(self):
        self.assertEqual( warmup1.near_hundred(93), True)
        self.assertEqual( warmup1.near_hundred(90), True)
        self.assertEqual( warmup1.near_hundred(89), False)
        self.assertEqual( warmup1.near_hundred(110), True)
        self.assertEqual( warmup1.near_hundred(111), False)
        self.assertEqual( warmup1.near_hundred(121), False)
        self.assertEqual( warmup1.near_hundred(-101), False)
        self.assertEqual( warmup1.near_hundred(-209), False)
        self.assertEqual( warmup1.near_hundred(190), True)
        self.assertEqual( warmup1.near_hundred(209), True)
        self.assertEqual( warmup1.near_hundred(0), False)
        self.assertEqual( warmup1.near_hundred(5), False)
        self.assertEqual( warmup1.near_hundred(-50), False)
        self.assertEqual( warmup1.near_hundred(191), True)
        self.assertEqual( warmup1.near_hundred(189), False)
        self.assertEqual( warmup1.near_hundred(200), True)
        self.assertEqual( warmup1.near_hundred(210), True)
        self.assertEqual( warmup1.near_hundred(211), False)
        self.assertEqual( warmup1.near_hundred(290), False)

    def test_pos_neg(self):
        self.assertEqual( warmup1.pos_neg(1, -1, False), True)
        self.assertEqual( warmup1.pos_neg(-1, 1, False), True)
        self.assertEqual( warmup1.pos_neg(-4, -5, True), True)
        self.assertEqual( warmup1.pos_neg(-4, -5, False), False)
        self.assertEqual( warmup1.pos_neg(-4, 5, False), True)
        self.assertEqual( warmup1.pos_neg(-4, 5, True), False)
        self.assertEqual( warmup1.pos_neg(1, 1, False), False)
        self.assertEqual( warmup1.pos_neg(-1, -1, False), False)
        self.assertEqual( warmup1.pos_neg(1, -1, True), False)
        self.assertEqual( warmup1.pos_neg(-1, 1, True), False)
        self.assertEqual( warmup1.pos_neg(1, 1, True), False)
        self.assertEqual( warmup1.pos_neg(-1, -1, True), True)
        self.assertEqual( warmup1.pos_neg(5, -5, False), True)
        self.assertEqual( warmup1.pos_neg(-6, 6, False), True)
        self.assertEqual( warmup1.pos_neg(-5, -6, False), False)
        self.assertEqual( warmup1.pos_neg(-2, -1, False), False)
        self.assertEqual( warmup1.pos_neg(1, 2, False), False)
        self.assertEqual( warmup1.pos_neg(-5, 6, True), False)
        self.assertEqual( warmup1.pos_neg(-5, -5, True), True)
    
    def test_not_string(self):
        self.assertEqual( warmup1.not_string("candy"), "not candy")
        self.assertEqual( warmup1.not_string("x"), "not x")
        self.assertEqual( warmup1.not_string("not bad"), "not bad")
        self.assertEqual( warmup1.not_string("bad"), "not bad")
        self.assertEqual( warmup1.not_string("not"), "not")
        self.assertEqual( warmup1.not_string("is not"), "not is not")
        self.assertEqual( warmup1.not_string("no"), "not no")

    def test_missing_char(self):
        self.assertEqual( warmup1.missing_char('kitten', 1), 'ktten')
        self.assertEqual( warmup1.missing_char('kitten', 0), 'itten')
        self.assertEqual( warmup1.missing_char('kitten', 4), 'kittn')
        self.assertEqual( warmup1.missing_char('Hi', 0), 'i')
        self.assertEqual( warmup1.missing_char('Hi', 1), 'H')
        self.assertEqual( warmup1.missing_char('code', 0), 'ode')
        self.assertEqual( warmup1.missing_char('code', 1), 'cde')
        self.assertEqual( warmup1.missing_char('code', 2), 'coe')
        self.assertEqual( warmup1.missing_char('code', 3), 'cod')
        self.assertEqual( warmup1.missing_char('chocolate', 8), 'chocolat')
    
    def test_front_back(self):
        self.assertEqual( warmup1.front_back('code'), 'eodc')
        self.assertEqual( warmup1.front_back('a'), 'a')
        self.assertEqual( warmup1.front_back('ab'), 'ba')
        self.assertEqual( warmup1.front_back('abc'), 'cba')
        self.assertEqual( warmup1.front_back(''), '')
        self.assertEqual( warmup1.front_back('Chocolate'), 'ehocolatC')
        self.assertEqual( warmup1.front_back('aavJ'), 'Java')
        self.assertEqual( warmup1.front_back('hello'), 'oellh')
    
    def test_front_3(self):
        self.assertEqual( warmup1.front_3('Java'), 'JavJavJav')
        self.assertEqual( warmup1.front_3('Chocolate'), 'ChoChoCho')
        self.assertEqual( warmup1.front_3('abc'), 'abcabcabc')
        self.assertEqual( warmup1.front_3('abcXYZ'), 'abcabcabc')
        self.assertEqual( warmup1.front_3('ab'), 'ababab')
        self.assertEqual( warmup1.front_3('a'), 'aaa')
        self.assertEqual( warmup1.front_3(''), '')
    
    def test_back_around(self):
        self.assertEqual( warmup1.back_around('cat'), "tcatt")
        self.assertEqual( warmup1.back_around('Hello'), "oHelloo")
        self.assertEqual( warmup1.back_around('a'), "aaa")
        self.assertEqual( warmup1.back_around('read'), "dreadd")
        self.assertEqual( warmup1.back_around('boo'), "obooo")

    def test_or_35(self):
        self.assertEqual( warmup1.or_35(3),True)
        self.assertEqual( warmup1.or_35(10), True)
        self.assertEqual( warmup1.or_35(8), False)
        self.assertEqual( warmup1.or_35(15), True)
        self.assertEqual( warmup1.or_35(5), True)
        self.assertEqual( warmup1.or_35(9), True)
        self.assertEqual( warmup1.or_35(4), False)
        self.assertEqual( warmup1.or_35(7), False)
        self.assertEqual( warmup1.or_35(6), True)
        self.assertEqual( warmup1.or_35(17), False)
        self.assertEqual( warmup1.or_35(18), True)
        self.assertEqual( warmup1.or_35(29), False)
        self.assertEqual( warmup1.or_35(20), True)
        self.assertEqual( warmup1.or_35(21), True)
        self.assertEqual( warmup1.or_35(22), False)
        self.assertEqual( warmup1.or_35(45), True)
        self.assertEqual( warmup1.or_35(99) , True)
        self.assertEqual( warmup1.or_35(100), True)
        self.assertEqual( warmup1.or_35(101), False)
        self.assertEqual( warmup1.or_35(121), False)
        self.assertEqual( warmup1.or_35(123), True)
    
    def test_front_22(self):
        self.assertEqual( warmup1.front_22('kitten'), 'kikittenki')
        self.assertEqual( warmup1.front_22('Ha'), 'HaHaHa')
        self.assertEqual( warmup1.front_22('abc'), 'ababcab')
        self.assertEqual( warmup1.front_22('ab'), 'ababab')
        self.assertEqual( warmup1.front_22('a'), 'aaa')
        self.assertEqual( warmup1.front_22('') , '')
        self.assertEqual( warmup1.front_22('Logic'), 'LoLogicLo')
    
    def test_back_around(self):
        self.assertEqual(warmup1.back_around('cat'), 'tcatt')
        self.assertEqual(warmup1.back_around('Hello'), 'oHelloo')
        self.assertEqual(warmup1.back_around('a'), 'aaa')
        self.assertEqual(warmup1.back_around('abc'), 'cabcc')
        self.assertEqual(warmup1.back_around('read'), 'dreadd')
        self.assertEqual(warmup1.back_around('boo'), 'obooo')
    
    def test_or_35(self):
        self.assertEqual(warmup1.or_35(3), True)
        self.assertEqual(warmup1.or_35(10), True)
        self.assertEqual(warmup1.or_35(8), False)
        self.assertEqual(warmup1.or_35(15), True)
        self.assertEqual(warmup1.or_35(5), True)
        self.assertEqual(warmup1.or_35(9), True)
        self.assertEqual(warmup1.or_35(4), False)
        self.assertEqual(warmup1.or_35(7), False)
        self.assertEqual(warmup1.or_35(6), True)
        self.assertEqual(warmup1.or_35(17), False)
        self.assertEqual(warmup1.or_35(18), True)
        self.assertEqual(warmup1.or_35(29), False)
        self.assertEqual(warmup1.or_35(20), True)
        self.assertEqual(warmup1.or_35(21), True)
        self.assertEqual(warmup1.or_35(22), False)
        self.assertEqual(warmup1.or_35(45), True)
        self.assertEqual(warmup1.or_35(99), True)
        self.assertEqual(warmup1.or_35(100), True)
        self.assertEqual(warmup1.or_35(101), False)
        self.assertEqual(warmup1.or_35(121), False)
        self.assertEqual(warmup1.or_35(122), False)
        self.assertEqual(warmup1.or_35(123), True)
    
    def test_front_22(self):
        self.assertEqual(warmup1.front_22('kitten'), 'kikittenki')
        self.assertEqual(warmup1.front_22('Ha'), 'HaHaHa')
        self.assertEqual(warmup1.front_22('abc'), 'ababcab')
        self.assertEqual(warmup1.front_22('ab'), 'ababab')
        self.assertEqual(warmup1.front_22('a'), 'aaa')
        self.assertEqual(warmup1.front_22(''), '')
        self.assertEqual(warmup1.front_22('Logic'), 'LoLogicLo')
    
    def test_start_hi(self):
        self.assertEqual(warmup1.start_hi('hi there'), True)
        self.assertEqual(warmup1.start_hi('hi'), True)
        self.assertEqual(warmup1.start_hi('hello hi'), False)
        self.assertEqual(warmup1.start_hi('he'), False)
        self.assertEqual(warmup1.start_hi('h'), False)
        self.assertEqual(warmup1.start_hi(''), False)
        self.assertEqual(warmup1.start_hi('ho hi'), False)
        self.assertEqual(warmup1.start_hi('hi ho'), True)
    
    def test_icy_hot(self):
        self.assertEqual(warmup1.icy_hot(120, -1), True)
        self.assertEqual(warmup1.icy_hot(-1, 120), True)
        self.assertEqual(warmup1.icy_hot(2, 120), False)
        self.assertEqual(warmup1.icy_hot(-1, 100), False)
        self.assertEqual(warmup1.icy_hot(-2, -2), False)
        self.assertEqual(warmup1.icy_hot(120, 120), False)
    
    def test_in_1020(self):
        self.assertEqual(warmup1.in_1020(12, 99), True)
        self.assertEqual(warmup1.in_1020(21, 12), True)
        self.assertEqual(warmup1.in_1020(8, 99), False)
        self.assertEqual(warmup1.in_1020(99, 10), True)
        self.assertEqual(warmup1.in_1020(20, 20), True)
        self.assertEqual(warmup1.in_1020(21, 21), False)
        self.assertEqual(warmup1.in_1020(9, 9), False)
    
    def test_has_teen(self):
        self.assertEqual(warmup1.has_teen(13, 20, 10), True)
        self.assertEqual(warmup1.has_teen(20, 19, 10), True)
        self.assertEqual(warmup1.has_teen(20, 10, 13), True)
        self.assertEqual(warmup1.has_teen(1, 20, 12), False)
        self.assertEqual(warmup1.has_teen(19, 20, 12), True)
        self.assertEqual(warmup1.has_teen(12, 20, 19), True)
        self.assertEqual(warmup1.has_teen(12, 9, 20), False)
        self.assertEqual(warmup1.has_teen(12, 18, 20), True)
        self.assertEqual(warmup1.has_teen(14, 2, 20), True)
        self.assertEqual(warmup1.has_teen(4, 2, 20), False)
        self.assertEqual(warmup1.has_teen(11, 22, 22), False)
    
    def test_lone_teen(self):
        self.assertEqual(warmup1.lone_teen(13, 99), True)
        self.assertEqual(warmup1.lone_teen(21, 19), True)
        self.assertEqual(warmup1.lone_teen(13, 13), False)
        self.assertEqual(warmup1.lone_teen(14, 20), True)
        self.assertEqual(warmup1.lone_teen(20, 15), True)
        self.assertEqual(warmup1.lone_teen(16, 17), False)
        self.assertEqual(warmup1.lone_teen(16, 9), True)
        self.assertEqual(warmup1.lone_teen(16, 18), False)
        self.assertEqual(warmup1.lone_teen(13, 19), False)
        self.assertEqual(warmup1.lone_teen(13, 20), True)
        self.assertEqual(warmup1.lone_teen(6, 18), True)
        self.assertEqual(warmup1.lone_teen(99, 13), True)
        self.assertEqual(warmup1.lone_teen(99, 99), False)
    
    def test_del_del(self):
        self.assertEqual(warmup1.del_del('adelbc'), 'abc')
        self.assertEqual(warmup1.del_del('adelHello'), 'aHello')
        self.assertEqual(warmup1.del_del('adedbc'), 'adedbc')
        self.assertEqual(warmup1.del_del('abcdel'), 'abcdel')
        self.assertEqual(warmup1.del_del('add'), 'add')
        self.assertEqual(warmup1.del_del('ad'), 'ad')
        self.assertEqual(warmup1.del_del('a'), 'a')
        self.assertEqual(warmup1.del_del(''), '')
        self.assertEqual(warmup1.del_del('del'), 'del')
        self.assertEqual(warmup1.del_del('adel'), 'a')
        self.assertEqual(warmup1.del_del('aadelbb'), 'aadelbb')
    
    def test_mix_start(self):
        self.assertEqual(warmup1.mix_start('mix snacks'), True)
        self.assertEqual(warmup1.mix_start('pix snacks'), True)
        self.assertEqual(warmup1.mix_start('piz snacks'), False)
        self.assertEqual(warmup1.mix_start('nix'), True)
        self.assertEqual(warmup1.mix_start('ni'), False)
        self.assertEqual(warmup1.mix_start('n'), False)
        self.assertEqual(warmup1.mix_start(''), False)
    
    def test_start_oz(self):
        self.assertEqual(warmup1.start_oz('ozymandias'), 'oz')
        self.assertEqual(warmup1.start_oz('bzoo'), 'z')
        self.assertEqual(warmup1.start_oz('oxx'), 'o')
        self.assertEqual(warmup1.start_oz('oz'), 'oz')
        self.assertEqual(warmup1.start_oz('ounce'), 'o')
        self.assertEqual(warmup1.start_oz('o'), 'o')
        self.assertEqual(warmup1.start_oz('abc'), '')
        self.assertEqual(warmup1.start_oz(''), '')
        self.assertEqual(warmup1.start_oz('zoo'), '')
        self.assertEqual(warmup1.start_oz('aztec'), 'z')
        self.assertEqual(warmup1.start_oz('zzzz'), 'z')
        self.assertEqual(warmup1.start_oz('oznic'), 'oz')
    
    def test_int_max(self):
        self.assertEqual(warmup1.int_max(1, 2, 3), 3)
        self.assertEqual(warmup1.int_max(1, 3, 2), 3)
        self.assertEqual(warmup1.int_max(3, 2, 1), 3)
        self.assertEqual(warmup1.int_max(9, 3, 3,), 9)
        self.assertEqual(warmup1.int_max(3, 9, 3), 9)
        self.assertEqual(warmup1.int_max(3, 3, 9), 9)
        self.assertEqual(warmup1.int_max(8, 2, 3), 8)
        self.assertEqual(warmup1.int_max(-3, -1, -2), -1)
        self.assertEqual(warmup1.int_max(6, 2, 5), 6)
        self.assertEqual(warmup1.int_max(5, 6, 2), 6)
        self.assertEqual(warmup1.int_max(5, 2, 6), 6)
    
    def test_close_10(self):
        self.assertEqual(warmup1.close_10(8, 13), 8)
        self.assertEqual(warmup1.close_10(13, 8), 8)
        self.assertEqual(warmup1.close_10(13, 7), 0)
        self.assertEqual(warmup1.close_10(7, 13), 0)
        self.assertEqual(warmup1.close_10(9, 13), 9)
        self.assertEqual(warmup1.close_10(13, 8), 8)
        self.assertEqual(warmup1.close_10(10, 12), 10)
        self.assertEqual(warmup1.close_10(11, 10), 10)
        self.assertEqual(warmup1.close_10(5, 21), 5)
        self.assertEqual(warmup1.close_10(0, 20), 0)
        self.assertEqual(warmup1.close_10(10, 10), 0)
    
    def test_in_30_50(self):
        self.assertEqual(warmup1.in_3040(30, 31), True)
        self.assertEqual(warmup1.in_3040(30, 41), False)
        self.assertEqual(warmup1.in_3040(40, 50), True)
        self.assertEqual(warmup1.in_3040(40, 51), False)
        self.assertEqual(warmup1.in_3040(39, 50), False)
        self.assertEqual(warmup1.in_3040(50, 39), False)
        self.assertEqual(warmup1.in_3040(40, 39), True)
        self.assertEqual(warmup1.in_3040(49, 48), True)
        self.assertEqual(warmup1.in_3040(50, 40), True)
        self.assertEqual(warmup1.in_3040(50, 51), False)
        self.assertEqual(warmup1.in_3040(35, 36), True)
        self.assertEqual(warmup1.in_3040(35, 45), False)
    
    def test_max_1020(self):
        self.assertEqual(warmup1.max_1020(11, 19), 19)
        self.assertEqual(warmup1.max_1020(19, 11), 19)
        self.assertEqual(warmup1.max_1020(11, 9), 11)
        self.assertEqual(warmup1.max_1020(9, 21), 0)
        self.assertEqual(warmup1.max_1020(10, 21), 10)
        self.assertEqual(warmup1.max_1020(21, 10), 10)
        self.assertEqual(warmup1.max_1020(9, 11), 11)
        self.assertEqual(warmup1.max_1020(23, 10), 10)
        self.assertEqual(warmup1.max_1020(20, 10), 20)
        self.assertEqual(warmup1.max_1020(7, 20), 20)
        self.assertEqual(warmup1.max_1020(17, 16), 17)
    
    def test_string_e(self):
        self.assertEqual(warmup1.string_e('Hello'), True)
        self.assertEqual(warmup1.string_e('Heelle'), True)
        self.assertEqual(warmup1.string_e('Heelele'), False)
        self.assertEqual(warmup1.string_e('Hll'), False)
        self.assertEqual(warmup1.string_e('e'), True)
        self.assertEqual(warmup1.string_e(''), False)
    
    def test_last_digit(self):
        self.assertEqual(warmup1.last_digit(7, 17), True)
        self.assertEqual(warmup1.last_digit(6, 17), False)
        self.assertEqual(warmup1.last_digit(3, 113), True)
        self.assertEqual(warmup1.last_digit(114, 113), False)
        self.assertEqual(warmup1.last_digit(114, 4), True)
        self.assertEqual(warmup1.last_digit(10, 0), True)
        self.assertEqual(warmup1.last_digit(11, 0), False)
    
    def test_end_up(self):
        self.assertEqual(warmup1.end_up('Hello'), 'HeLLO')
        self.assertEqual(warmup1.end_up('hi there'), 'hi thERE')
        self.assertEqual(warmup1.end_up('hi'), 'HI')
        self.assertEqual(warmup1.end_up('woo hoo'), 'woo HOO')
        self.assertEqual(warmup1.end_up('xyz12'), 'xyZ12')
        self.assertEqual(warmup1.end_up('x'), 'X')
        self.assertEqual(warmup1.end_up(''), '')
    
    def test_every_nth(self):
        self.assertEqual(warmup1.every_nth('Miracle', 2), 'Mrce')
        self.assertEqual(warmup1.every_nth('abcdefg', 2), 'aceg')
        self.assertEqual(warmup1.every_nth('abcdefg', 3), 'adg')
        self.assertEqual(warmup1.every_nth('Chocolate', 3), 'Cca')
        self.assertEqual(warmup1.every_nth('Chocolates', 3), 'Ccas')
        self.assertEqual(warmup1.every_nth('Chocolates', 4), 'Coe')
        self.assertEqual(warmup1.every_nth('Chocaltes', 100), 'C')

if __name__ == '__main__':
    unittest.main()